#include "xparameters.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "stdlib.h"
#include "time.h"


// Parameter definitions
#define INTC_DEVICE_ID 		XPAR_PS7_SCUGIC_0_DEVICE_ID
#define BTNS_DEVICE_ID		XPAR_AXI_GPIO_0_DEVICE_ID
#define SW_DEVICE_ID		XPAR_AXI_GPIO_1_DEVICE_ID
#define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR

#define BTN_INT 			XGPIO_IR_CH1_MASK

XGpio SWInst, BTNInst;
XScuGic INTCInst;
int sw_data=0;
int btn_value;
int fristpress=0;
int realbr[5][4];
char userbr[5][4];
int gameon=1;
int xtemp,ytemp;
//----------------------------------------------------
// PROTOTYPE FUNCTIONS
//----------------------------------------------------
static void BTN_Intr_Handler(void *baseaddr_p);
static int InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
static int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr);

//----------------------------------------------------
// INTERRUPT HANDLER FUNCTIONS
// - called by the timer, button interrupt, performs
// - LED flashing
//----------------------------------------------------


void BTN_Intr_Handler(void *InstancePtr)
{
	// Disable GPIO interrupts
	XGpio_InterruptDisable(&BTNInst, BTN_INT);
	// Ignore additional button presses
	if ((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) !=
			BTN_INT) {
			return;
		}
	btn_value = XGpio_DiscreteRead(&BTNInst, 1);
	sw_data=XGpio_DiscreteRead(&SWInst, 1);

	if(btn_value>0)
	{

		decoder(sw_data,btn_value);

		if(fristpress==0)
		{
				userboard();
				createrealboard(btn_value);

		}
		else if(gameon==0)
		{
			xil_printf("Game Over!\n\r");
		}
		else
		{
			userboard(sw_data,btn_value);
			xil_printf("\n\r");
		}

	}

	//xil_printf("all good%d\n\r",btn_value+sw_data);

    (void)XGpio_InterruptClear(&BTNInst, BTN_INT);
    // Enable GPIO interrupts
    XGpio_InterruptEnable(&BTNInst, BTN_INT);
}


void decoder(int sw,int btn)
{
	if(sw==2 )
	{
		sw_data=2;
	}
	else if(sw==4 )
	{
			sw_data=3;
	}
	else if(sw==8)
	{
				sw_data=4;
	}
	else if(sw==1 )
	{
			sw_data=1;
	}
	else sw_data=0;



	if(btn==2)
	{
		btn_value = 1;
	}
	else if( btn==4)
	{
		btn_value = 2;
	}
	else if( btn==8)
	{
		btn_value = 3;
	}
	else if( btn==1)
	{
		btn_value = 0;
	}
	else{
		btn_value = 0;
	}
}

void createrealboard(int value)
{
	srand ( (btn_value*136)+23 );
	fristpress=1;
	int i,j,c,k;
	int random = (rand() % (2));
	int ranrow = (rand() % (5 - 0 + 1)) + 0;
	int rancol = (rand() % (4 - 0 + 1)) + 0;
	int mranrow = (rand() % (5 - 0 + 1)) + 0;
	int mrancol2 = (rand() % (4 - 0 + 1)) + 0;

	//populate real board
	for(i=0;i<5;i++)
	{
		for(k=0;k<4;k++)
		{
			realbr[i][k]=rand() % (4);
		}
	}
	i=0;
	k=0;
	//placing mines
	for(c=0;c<5;c++)
	{
		realbr[(rand() % (5 - 0 + 1)) + 0][(rand() % (4 - 0 + 1)) + 0]=8;
	}
	i=0;
	k=0;

	//print real board
	xil_printf("real board\n\r");
	for(i=0;i<5;i++)
	{
		for(k=0;k<4;k++)
		{
			xil_printf("%d  ",realbr[i][k]);
			 if(k==3)
			 {
				xil_printf("\n\r");
			 }
		}
	}



}

void userboard(int x,int y)
{
	int i,j,c,k;

	//genrate user array
	//insitalise on first button press
	if(fristpress==0)
	{
		for(i=0;i<5;i++)
		{
			for(k=0;k<4;k++)
			{
				userbr[i][k]='-';
			}
		}
	}

	else
	{
		if(realbr[x][y]==8)
		{
			userbr[x][y]='*';
			gameon=0;
		}
		else
		{
			userbr[x][y]=realbr[x][y]+'0';
		}
	}

	int xtemp=0,ytemp=0;
	//print user board
	if(xtemp==x && ytemp=y)
	{
		xil_printf(" ");
	}
	else
	{
		xil_printf("Enter your location to explore; use the switches to select a row and press a button to confirm your location\n\r");
		xil_printf("Current field\n\r");
		for(i=0;i<5;i++)
		{
			for(k=0;k<4;k++)
			{
				xil_printf("%c  ",userbr[i][k]);
				 if(k==3)
				 {
					xil_printf("\n\r");
				 }
			}
		}
	}
		if(gameon==0)
		{
			xil_printf("BOOM! Game Over!\r");
		}
		xtemp=x;
		ytemp=y;
}
//----------------------------------------------------
// MAIN FUNCTION
//----------------------------------------------------
int main (void)
{

	xil_printf("press any button(s) to start \n\r");

  int status;
  //----------------------------------------------------
  // INITIALIZE THE PERIPHERALS & SET DIRECTIONS OF GPIO
  //----------------------------------------------------

  // Initialise Push Buttons
  status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
  if(status != XST_SUCCESS) return XST_FAILURE;
  status = XGpio_Initialize(&SWInst, SW_DEVICE_ID);
    if(status != XST_SUCCESS) return XST_FAILURE;
  // Set LEDs direction to outputs
  XGpio_SetDataDirection(&SWInst, 1, 0xFF);
  // Set all buttons direction to inputs
  XGpio_SetDataDirection(&BTNInst, 1, 0xFF);

  // Initialize interrupt controller
  status = IntcInitFunction(INTC_DEVICE_ID, &BTNInst);
  if(status != XST_SUCCESS) return XST_FAILURE;

  while(1);

  return 0;
}

//----------------------------------------------------
// INITIAL SETUP FUNCTIONS
//----------------------------------------------------

int InterruptSystemSetup(XScuGic *XScuGicInstancePtr)
{

	// Enable interrupt
	XGpio_InterruptEnable(&BTNInst, BTN_INT);
	XGpio_InterruptGlobalEnable(&BTNInst);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			 	 	 	 	 	 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
			 	 	 	 	 	 XScuGicInstancePtr);
	Xil_ExceptionEnable();


	return XST_SUCCESS;

}

int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr)
{
	XScuGic_Config *IntcConfig;
	int status;

	// Interrupt controller initialisation
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Call to interrupt setup
	status = InterruptSystemSetup(&INTCInst);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Connect GPIO interrupt to handler
	status = XScuGic_Connect(&INTCInst,
					  	  	 INTC_GPIO_INTERRUPT_ID,
					  	  	 (Xil_ExceptionHandler)BTN_Intr_Handler,
					  	  	 (void *)GpioInstancePtr);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Enable GPIO interrupts interrupt
	XGpio_InterruptEnable(GpioInstancePtr, 1);
	XGpio_InterruptGlobalEnable(GpioInstancePtr);

	// Enable GPIO and timer interrupts in the controller
	XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);

	return XST_SUCCESS;
}


