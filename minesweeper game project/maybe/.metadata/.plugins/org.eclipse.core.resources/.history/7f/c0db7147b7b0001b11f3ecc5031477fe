#include <stdio.h>
#include "platform.h"
#include "xil_printf.h" // interger to pointer without cast PROBLEM....
#include<stdlib.h> // SOLUTION :  whenever using string the data type
#include <stdbool.h>                  // of the array must be char
#include "xparameters.h"
#include "xgpio.h"
#include "math.h"


#define MAXSIDE 5
#define dmines 10
#define cols 4 // (25 * 25 - 99)
XGpio in1;
XGpio in2;

int sw_data=0;
int btn_data=0;
int SIDE ; // side length of the board
int MINES ; // number of mines on the board
int fl=0;
// A Utility Function to check whether given cell (row, col)
// is a valid cell or not
bool isValid(int row, int col)
{
	// Returns true if row number and column number
	// is in range
	return (row >= 0) && (row < SIDE) &&
		(col >= 0) && (col < SIDE);
}

// A Utility Function to check whether given cell (row, col)
// has a mine or not.
bool isMine (int row, int col, char board[][MAXSIDE])
{
	if (board[row][col] == '*')
		return (true);
	else
		return (false);
}

// A Function to get the user's move
void makeMove(int *x, int *y)
{
	//int i;
	// Take the input move
	xil_printf("Enter your move, (row, column) -> press enter afer each input\r ");

	//scanf("%d %d", x, y);
//	 x=XUartLite_RecvByte(XPAR_UARTLITE_0_BASEADDR+i);
//	 y=XUartLite_RecvByte(XPAR_UARTLITE_0_BASEADDR+i+1);


	int buf=sw_data;
	int buf2=y=btn_data;
	xil_printf("s=%d b=%d \r ",sw_data,btn_data);
	 x=buf;
	 y=buf2;
	 //i=i+1;
	return;
}

// A Function to print the current gameplay board
void printBoard(char myBoard[][MAXSIDE])
{
	int i, j;

	xil_printf (" \r");

	for (i=0; i<SIDE; i++)
		xil_printf ("%d \r", i);

	xil_printf ("\n\n\r");

	for (i=0; i<SIDE; i++)
	{
		xil_printf ("%d \r", i);

		for (j=0; j<SIDE; j++)
			xil_printf ("%c \r", myBoard[i][j]);
		xil_printf ("\n\r");
	}
	return;
}

// A Function to count the number of
// mines in the adjacent cells
int countAdjacentMines(int row, int col, int mines[][2],char realBoard[][MAXSIDE])
{

	int i;
	int count = 0;


	//Count all the mines in the 8 adjacent cells


	//----------- 1st Neighbour (North) ------------

		// Only process this cell if this is a valid one
		if (isValid (row-1, col) == true)
		{
			if (isMine (row-1, col, realBoard) == true)
			count++;
		}

	//----------- 2nd Neighbour (South) ------------

		// Only process this cell if this is a valid one
		if (isValid (row+1, col) == true)
		{
			if (isMine (row+1, col, realBoard) == true)
			count++;
		}

	//----------- 3rd Neighbour (East) ------------

		// Only process this cell if this is a valid one
		if (isValid (row, col+1) == true)
		{
			if (isMine (row, col+1, realBoard) == true)
			count++;
		}

	//----------- 4th Neighbour (West) ------------

		// Only process this cell if this is a valid one
		if (isValid (row, col-1) == true)
		{
			if (isMine (row, col-1, realBoard) == true)
			count++;
		}

	//----------- 5th Neighbour (North-East) ------------

		// Only process this cell if this is a valid one
		if (isValid (row-1, col+1) == true)
		{
			if (isMine (row-1, col+1, realBoard) == true)
			count++;
		}

	//----------- 6th Neighbour (North-West) ------------

		// Only process this cell if this is a valid one
		if (isValid (row-1, col-1) == true)
		{
			if (isMine (row-1, col-1, realBoard) == true)
			count++;
		}

	//----------- 7th Neighbour (South-East) ------------

		// Only process this cell if this is a valid one
		if (isValid (row+1, col+1) == true)
		{
			if (isMine (row+1, col+1, realBoard) == true)
			count++;
		}

	//----------- 8th Neighbour (South-West) ------------

		// Only process this cell if this is a valid one
		if (isValid (row+1, col-1) == true)
		{
			if (isMine (row+1, col-1, realBoard) == true)
			count++;
		}

	return (count);
}

// A Recursive Fucntion to play the Minesweeper Game
bool playMinesweeperUtil(char myBoard[][MAXSIDE], char realBoard[][MAXSIDE],int mines[][2], int row, int col, int *movesLeft)
{

	// Base Case of Recursion
	if (myBoard[row][col] != '-')
		return (false);

	int i, j;

	// You opened a mine
	// You are going to lose
	if (realBoard[row][col] == '*')
	{
		myBoard[row][col]='*';

		for (i=0; i<MINES; i++) myBoard[mines[i][0]][mines[i][1]]='*';

		printBoard (myBoard);
		xil_printf ("\nKABOOM! GAME OVER! \n\r");
		fl=1;
		return (true) ;
	}

	else
	{
		// Calculate the number of adjacent mines and put it
		// on the board
		int count = countAdjacentMines(row, col, mines, realBoard);
		(*movesLeft)--;

		myBoard[row][col] = count + '0';

		if (!count)
		{

				//----------- 1st Neighbour (North) ------------

			// Only process this cell if this is a valid one
			if (isValid (row-1, col) == true)
			{
				if (isMine (row-1, col, realBoard) == false)
				playMinesweeperUtil(myBoard, realBoard, mines, row-1, col, movesLeft);
			}

			//----------- 2nd Neighbour (South) ------------

			// Only process this cell if this is a valid one
			if (isValid (row+1, col) == true)
			{
				if (isMine (row+1, col, realBoard) == false)
					playMinesweeperUtil(myBoard, realBoard, mines, row+1, col, movesLeft);
			}

			//----------- 3rd Neighbour (East) ------------

			// Only process this cell if this is a valid one
			if (isValid (row, col+1) == true)
			{
				if (isMine (row, col+1, realBoard) == false)
					playMinesweeperUtil(myBoard, realBoard, mines, row, col+1, movesLeft);
			}

			//----------- 4th Neighbour (West) ------------

			// Only process this cell if this is a valid one
			if (isValid (row, col-1) == true)
			{
				if (isMine (row, col-1, realBoard) == false)
					playMinesweeperUtil(myBoard, realBoard, mines, row, col-1, movesLeft);
			}

			//----------- 5th Neighbour (North-East) ------------

			// Only process this cell if this is a valid one
			if (isValid (row-1, col+1) == true)
			{
				if (isMine (row-1, col+1, realBoard) == false)
					playMinesweeperUtil(myBoard, realBoard, mines, row-1, col+1, movesLeft);
			}

			//----------- 6th Neighbour (North-West) ------------

			// Only process this cell if this is a valid one
			if (isValid (row-1, col-1) == true)
			{
				if (isMine (row-1, col-1, realBoard) == false)
					playMinesweeperUtil(myBoard, realBoard, mines, row-1, col-1, movesLeft);
			}

			//----------- 7th Neighbour (South-East) ------------

			// Only process this cell if this is a valid one
			if (isValid (row+1, col+1) == true)
			{
				if (isMine (row+1, col+1, realBoard) == false)
					playMinesweeperUtil(myBoard, realBoard, mines, row+1, col+1, movesLeft);
			}

			//----------- 8th Neighbour (South-West) ------------

			// Only process this cell if this is a valid one
			if (isValid (row+1, col-1) == true)
			{
				if (isMine (row+1, col-1, realBoard) == false)
					playMinesweeperUtil(myBoard, realBoard, mines, row+1, col-1, movesLeft);
			}
		}

		return (false);
	}
}

// A Function to place the mines randomly
// on the board
void placeMines(int mines[][2], char realBoard[][MAXSIDE])
{
	bool mark[MAXSIDE*MAXSIDE];

	memset (mark, false, sizeof (mark));

	// Continue until all random mines have been created.
	for (int i=0; i<MINES; )
	{
		int random = rand() % (SIDE*SIDE);
		int x = random / SIDE;
		int y = random % SIDE;

		// Add the mine if no mine is placed at this
		// position on the board
		if (mark[random] == false)
		{
			// Row Index of the Mine
			mines[i][0]= x;
			// Column Index of the Mine
			mines[i][1] = y;

			// Place the mine
			realBoard[mines[i][0]][mines[i][1]] = '*';
			mark[random] = true;
			i++;
		}
	}

	return;
}

// A Function to initialise the game
void initialise(char realBoard[][MAXSIDE], char myBoard[][MAXSIDE])
{
	// Initiate the random number generator so that
	// the same configuration doesn't arises
	//srand(time (NULL));

	// Assign all the cells as mine-free
	for (int i=0; i<SIDE; i++)
	{
		for (int j=0; j<SIDE; j++)
		{
			myBoard[i][j] = realBoard[i][j] = '-';
		}
	}

	return;
}


// A function to replace the mine from (row, col) and put
// it to a vacant space
void replaceMine (int row, int col, char board[][MAXSIDE])
{
	for (int i=0; i<SIDE; i++)
	{
		for (int j=0; j<SIDE; j++)
			{
				// Find the first location in the board
				// which is not having a mine and put a mine
				// there.
				if (board[i][j] != '*')
				{
					board[i][j] = '*';
					board[row][col] = '-';
					return;
				}
			}
	}
	return;
}

// A Function to play Minesweeper game
void playMinesweeper ()
{
	// Initially the game is not over
	bool gameOver = false;

	// Actual Board and My Board
	char realBoard[MAXSIDE][cols], myBoard[MAXSIDE][cols];

	int movesLeft = SIDE * SIDE - MINES, x, y;
	int mines[dmines][2]; // stores (x,y) coordinates of all mines.

	initialise (realBoard, myBoard);

	// Place the Mines randomly
	placeMines (dmines, realBoard);


	// You are in the game until you have not opened a mine
	// So keep playing

	int currentMoveIndex = 0;
	while (gameOver == false)
	{
		xil_printf ("Current Status of Board : \n\r");
		printBoard (myBoard);
		makeMove (&x, &y);

		// This is to guarantee that the first move is
		// always safe
		// If it is the first move of the game
		if (currentMoveIndex == 0)
		{
			// If the first move itself is a mine
			// then we remove the mine from that location
			if (isMine (x, y, realBoard) == true)
				replaceMine (x, y, realBoard);
		}

		currentMoveIndex ++;

		gameOver = playMinesweeperUtil (myBoard, realBoard, mines, x, y, &movesLeft);

		if ((gameOver == false) && (movesLeft == 0))
		{
			xil_printf ("\nYou won !\n\r");
			gameOver = true;
		}
	}
	return;
}
void gpioinitialise()
{


		//Initialization using function XGpio_Initialize
		 XGpio_Initialize(&in1, XPAR_AXI_GPIO_0_DEVICE_ID);
		 XGpio_Initialize(&in2, XPAR_AXI_GPIO_1_DEVICE_ID);

		//Setting data direction using function XGpio_SetDataDirection
		 XGpio_SetDataDirection(&in1, 1, 0xF);
		 XGpio_SetDataDirection(&in2, 1, 0xF);


}

// Driver Program to test above functions
int main()
{
	gpioinitialise();
	 while(1)
	 {
		  sw_data = XGpio_DiscreteRead(&in2, 1);
		  btn_data = XGpio_DiscreteRead(&in1,1 );
		  playMinesweeper ();
		  if(fl)
		  {
			  break;
		  }

	 }



	return (0);
}


