// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _compressf_HH_
#define _compressf_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "compressf_mac_mulbkb.h"
#include "compressf_odoarr.h"

namespace ap_rtl {

struct compressf : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > as_address0;
    sc_out< sc_logic > as_ce0;
    sc_in< sc_lv<32> > as_q0;
    sc_out< sc_lv<10> > as_address1;
    sc_out< sc_logic > as_ce1;
    sc_in< sc_lv<32> > as_q1;
    sc_out< sc_lv<10> > bs_address0;
    sc_out< sc_logic > bs_ce0;
    sc_out< sc_logic > bs_we0;
    sc_out< sc_lv<32> > bs_d0;


    // Module declarations
    compressf(sc_module_name name);
    SC_HAS_PROCESS(compressf);

    ~compressf();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    compressf_odoarr* odoarr_U;
    compressf_mac_mulbkb<1,1,5,6,5,10>* compressf_mac_mulbkb_U1;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > indvar_flatten_reg_161;
    sc_signal< sc_lv<10> > k_0_reg_172;
    sc_signal< sc_lv<5> > i_0_reg_183;
    sc_signal< sc_lv<32> > x_0_reg_194;
    sc_signal< sc_lv<10> > k_1_reg_205;
    sc_signal< sc_lv<5> > j_0_reg_216;
    sc_signal< sc_lv<10> > i_1_reg_227;
    sc_signal< sc_lv<1> > icmp_ln211_fu_238_p2;
    sc_signal< sc_lv<1> > icmp_ln211_reg_520;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln211_reg_520_pp0_iter1_reg;
    sc_signal< sc_lv<10> > add_ln211_fu_244_p2;
    sc_signal< sc_lv<10> > add_ln211_reg_524;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln214_fu_268_p2;
    sc_signal< sc_lv<1> > icmp_ln214_reg_529;
    sc_signal< sc_lv<10> > select_ln220_fu_274_p3;
    sc_signal< sc_lv<10> > select_ln220_reg_534;
    sc_signal< sc_lv<5> > select_ln220_1_fu_282_p3;
    sc_signal< sc_lv<5> > select_ln220_1_reg_540;
    sc_signal< sc_lv<5> > select_ln220_2_fu_290_p3;
    sc_signal< sc_lv<5> > select_ln220_2_reg_548;
    sc_signal< sc_lv<10> > mul_ln218_fu_302_p2;
    sc_signal< sc_lv<10> > mul_ln218_reg_554;
    sc_signal< sc_lv<1> > icmp_ln220_fu_308_p2;
    sc_signal< sc_lv<1> > icmp_ln220_reg_560;
    sc_signal< sc_lv<1> > icmp_ln220_1_fu_314_p2;
    sc_signal< sc_lv<1> > icmp_ln220_1_reg_565;
    sc_signal< sc_lv<10> > select_ln211_fu_320_p3;
    sc_signal< sc_lv<10> > select_ln211_reg_570;
    sc_signal< sc_lv<32> > select_ln211_1_fu_328_p3;
    sc_signal< sc_lv<32> > select_ln211_1_reg_575;
    sc_signal< sc_lv<10> > zext_ln214_fu_341_p1;
    sc_signal< sc_lv<10> > zext_ln214_reg_580;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<10> > add_ln219_fu_354_p2;
    sc_signal< sc_lv<10> > add_ln219_reg_590;
    sc_signal< sc_lv<5> > j_fu_385_p2;
    sc_signal< sc_lv<5> > j_reg_600;
    sc_signal< sc_lv<32> > as_load_1_reg_605;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<10> > grp_fu_513_p3;
    sc_signal< sc_lv<10> > add_ln220_reg_610;
    sc_signal< sc_lv<1> > icmp_ln228_fu_411_p2;
    sc_signal< sc_lv<1> > icmp_ln228_reg_630;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<10> > i_2_fu_417_p2;
    sc_signal< sc_lv<10> > i_2_reg_634;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<11> > zext_ln228_fu_423_p1;
    sc_signal< sc_lv<11> > zext_ln228_reg_639;
    sc_signal< sc_lv<32> > odoarr_q1;
    sc_signal< sc_lv<32> > odoarr_load_1_reg_654;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage1;
    sc_signal< bool > ap_block_state8_pp1_stage1_iter0;
    sc_signal< bool > ap_block_state10_pp1_stage1_iter1;
    sc_signal< bool > ap_block_pp1_stage1_11001;
    sc_signal< sc_lv<1> > icmp_ln232_fu_437_p2;
    sc_signal< sc_lv<1> > icmp_ln232_reg_660;
    sc_signal< sc_lv<32> > cp_1_load_reg_669;
    sc_signal< sc_lv<1> > icmp_ln237_fu_456_p2;
    sc_signal< sc_lv<1> > icmp_ln237_reg_675;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state7;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage1_subdone;
    sc_signal< sc_lv<10> > odoarr_address0;
    sc_signal< sc_logic > odoarr_ce0;
    sc_signal< sc_logic > odoarr_we0;
    sc_signal< sc_lv<32> > odoarr_d0;
    sc_signal< sc_lv<32> > odoarr_q0;
    sc_signal< sc_lv<10> > odoarr_address1;
    sc_signal< sc_logic > odoarr_ce1;
    sc_signal< sc_lv<10> > ap_phi_mux_indvar_flatten_phi_fu_165_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<10> > ap_phi_mux_k_0_phi_fu_176_p4;
    sc_signal< sc_lv<5> > ap_phi_mux_i_0_phi_fu_187_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_x_0_phi_fu_198_p4;
    sc_signal< sc_lv<10> > ap_phi_mux_k_1_phi_fu_209_p4;
    sc_signal< sc_lv<5> > ap_phi_mux_j_0_phi_fu_220_p4;
    sc_signal< sc_lv<10> > ap_phi_mux_i_1_phi_fu_231_p4;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<64> > zext_ln218_2_fu_349_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > zext_ln220_3_fu_380_p1;
    sc_signal< sc_lv<64> > zext_ln218_1_fu_393_p1;
    sc_signal< sc_lv<64> > zext_ln220_1_fu_397_p1;
    sc_signal< sc_lv<64> > zext_ln232_fu_427_p1;
    sc_signal< sc_lv<64> > zext_ln232_1_fu_432_p1;
    sc_signal< sc_lv<64> > sext_ln237_fu_448_p1;
    sc_signal< bool > ap_block_pp1_stage1;
    sc_signal< sc_lv<64> > sext_ln240_fu_461_p1;
    sc_signal< sc_lv<64> > sext_ln241_fu_474_p1;
    sc_signal< sc_lv<32> > count_1_fu_62;
    sc_signal< sc_lv<32> > select_ln243_fu_479_p3;
    sc_signal< sc_lv<32> > count_fu_502_p2;
    sc_signal< sc_lv<32> > cp_1_fu_66;
    sc_signal< sc_lv<32> > cp_fu_487_p2;
    sc_signal< sc_lv<10> > add_ln219_1_fu_262_p2;
    sc_signal< sc_lv<5> > i_fu_256_p2;
    sc_signal< sc_lv<5> > mul_ln218_fu_302_p0;
    sc_signal< sc_lv<32> > x_fu_250_p2;
    sc_signal< sc_lv<10> > add_ln218_fu_344_p2;
    sc_signal< sc_lv<1> > select_ln220_3_fu_336_p3;
    sc_signal< sc_lv<5> > sub_ln220_fu_359_p2;
    sc_signal< sc_lv<5> > select_ln220_4_fu_364_p3;
    sc_signal< sc_lv<10> > zext_ln220_2_fu_371_p1;
    sc_signal< sc_lv<10> > add_ln220_1_fu_375_p2;
    sc_signal< sc_lv<11> > add_ln237_fu_443_p2;
    sc_signal< sc_lv<32> > sext_ln240_fu_461_p0;
    sc_signal< sc_lv<32> > add_ln241_fu_469_p2;
    sc_signal< sc_lv<5> > grp_fu_513_p0;
    sc_signal< sc_lv<6> > grp_fu_513_p1;
    sc_signal< sc_lv<5> > grp_fu_513_p2;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_lv<10> > grp_fu_513_p00;
    sc_signal< sc_lv<10> > mul_ln218_fu_302_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_pp0_stage0;
    static const sc_lv<7> ap_ST_fsm_pp0_stage1;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_pp1_stage0;
    static const sc_lv<7> ap_ST_fsm_pp1_stage1;
    static const sc_lv<7> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<10> ap_const_lv10_271;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<10> ap_const_lv10_19;
    static const sc_lv<5> ap_const_lv5_19;
    static const sc_lv<5> ap_const_lv5_18;
    static const sc_lv<11> ap_const_lv11_7FF;
    static const sc_lv<32> ap_const_lv32_6;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln211_fu_244_p2();
    void thread_add_ln218_fu_344_p2();
    void thread_add_ln219_1_fu_262_p2();
    void thread_add_ln219_fu_354_p2();
    void thread_add_ln220_1_fu_375_p2();
    void thread_add_ln237_fu_443_p2();
    void thread_add_ln241_fu_469_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp1_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp1_stage1();
    void thread_ap_block_pp1_stage1_11001();
    void thread_ap_block_pp1_stage1_subdone();
    void thread_ap_block_state10_pp1_stage1_iter1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state7_pp1_stage0_iter0();
    void thread_ap_block_state8_pp1_stage1_iter0();
    void thread_ap_block_state9_pp1_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_condition_pp1_exit_iter0_state7();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_i_0_phi_fu_187_p4();
    void thread_ap_phi_mux_i_1_phi_fu_231_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_165_p4();
    void thread_ap_phi_mux_j_0_phi_fu_220_p4();
    void thread_ap_phi_mux_k_0_phi_fu_176_p4();
    void thread_ap_phi_mux_k_1_phi_fu_209_p4();
    void thread_ap_phi_mux_x_0_phi_fu_198_p4();
    void thread_ap_ready();
    void thread_as_address0();
    void thread_as_address1();
    void thread_as_ce0();
    void thread_as_ce1();
    void thread_bs_address0();
    void thread_bs_ce0();
    void thread_bs_d0();
    void thread_bs_we0();
    void thread_count_fu_502_p2();
    void thread_cp_fu_487_p2();
    void thread_grp_fu_513_p0();
    void thread_grp_fu_513_p00();
    void thread_grp_fu_513_p1();
    void thread_grp_fu_513_p2();
    void thread_i_2_fu_417_p2();
    void thread_i_fu_256_p2();
    void thread_icmp_ln211_fu_238_p2();
    void thread_icmp_ln214_fu_268_p2();
    void thread_icmp_ln220_1_fu_314_p2();
    void thread_icmp_ln220_fu_308_p2();
    void thread_icmp_ln228_fu_411_p2();
    void thread_icmp_ln232_fu_437_p2();
    void thread_icmp_ln237_fu_456_p2();
    void thread_j_fu_385_p2();
    void thread_mul_ln218_fu_302_p0();
    void thread_mul_ln218_fu_302_p00();
    void thread_mul_ln218_fu_302_p2();
    void thread_odoarr_address0();
    void thread_odoarr_address1();
    void thread_odoarr_ce0();
    void thread_odoarr_ce1();
    void thread_odoarr_d0();
    void thread_odoarr_we0();
    void thread_select_ln211_1_fu_328_p3();
    void thread_select_ln211_fu_320_p3();
    void thread_select_ln220_1_fu_282_p3();
    void thread_select_ln220_2_fu_290_p3();
    void thread_select_ln220_3_fu_336_p3();
    void thread_select_ln220_4_fu_364_p3();
    void thread_select_ln220_fu_274_p3();
    void thread_select_ln243_fu_479_p3();
    void thread_sext_ln237_fu_448_p1();
    void thread_sext_ln240_fu_461_p0();
    void thread_sext_ln240_fu_461_p1();
    void thread_sext_ln241_fu_474_p1();
    void thread_sub_ln220_fu_359_p2();
    void thread_x_fu_250_p2();
    void thread_zext_ln214_fu_341_p1();
    void thread_zext_ln218_1_fu_393_p1();
    void thread_zext_ln218_2_fu_349_p1();
    void thread_zext_ln220_1_fu_397_p1();
    void thread_zext_ln220_2_fu_371_p1();
    void thread_zext_ln220_3_fu_380_p1();
    void thread_zext_ln228_fu_423_p1();
    void thread_zext_ln232_1_fu_432_p1();
    void thread_zext_ln232_fu_427_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
