// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "compressf.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic compressf::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic compressf::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> compressf::ap_ST_fsm_state1 = "1";
const sc_lv<7> compressf::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<7> compressf::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<7> compressf::ap_ST_fsm_state6 = "1000";
const sc_lv<7> compressf::ap_ST_fsm_pp1_stage0 = "10000";
const sc_lv<7> compressf::ap_ST_fsm_pp1_stage1 = "100000";
const sc_lv<7> compressf::ap_ST_fsm_state11 = "1000000";
const sc_lv<32> compressf::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool compressf::ap_const_boolean_1 = true;
const sc_lv<32> compressf::ap_const_lv32_1 = "1";
const bool compressf::ap_const_boolean_0 = false;
const sc_lv<1> compressf::ap_const_lv1_0 = "0";
const sc_lv<32> compressf::ap_const_lv32_2 = "10";
const sc_lv<32> compressf::ap_const_lv32_4 = "100";
const sc_lv<32> compressf::ap_const_lv32_5 = "101";
const sc_lv<1> compressf::ap_const_lv1_1 = "1";
const sc_lv<32> compressf::ap_const_lv32_3 = "11";
const sc_lv<10> compressf::ap_const_lv10_0 = "0000000000";
const sc_lv<5> compressf::ap_const_lv5_0 = "00000";
const sc_lv<10> compressf::ap_const_lv10_271 = "1001110001";
const sc_lv<10> compressf::ap_const_lv10_1 = "1";
const sc_lv<5> compressf::ap_const_lv5_1 = "1";
const sc_lv<10> compressf::ap_const_lv10_19 = "11001";
const sc_lv<5> compressf::ap_const_lv5_19 = "11001";
const sc_lv<5> compressf::ap_const_lv5_18 = "11000";
const sc_lv<11> compressf::ap_const_lv11_7FF = "11111111111";
const sc_lv<32> compressf::ap_const_lv32_6 = "110";

compressf::compressf(sc_module_name name) : sc_module(name), mVcdFile(0) {
    odoarr_U = new compressf_odoarr("odoarr_U");
    odoarr_U->clk(ap_clk);
    odoarr_U->reset(ap_rst);
    odoarr_U->address0(odoarr_address0);
    odoarr_U->ce0(odoarr_ce0);
    odoarr_U->we0(odoarr_we0);
    odoarr_U->d0(odoarr_d0);
    odoarr_U->q0(odoarr_q0);
    odoarr_U->address1(odoarr_address1);
    odoarr_U->ce1(odoarr_ce1);
    odoarr_U->q1(odoarr_q1);
    compressf_mac_mulbkb_U1 = new compressf_mac_mulbkb<1,1,5,6,5,10>("compressf_mac_mulbkb_U1");
    compressf_mac_mulbkb_U1->din0(grp_fu_513_p0);
    compressf_mac_mulbkb_U1->din1(grp_fu_513_p1);
    compressf_mac_mulbkb_U1->din2(grp_fu_513_p2);
    compressf_mac_mulbkb_U1->dout(grp_fu_513_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln211_fu_244_p2);
    sensitive << ( ap_phi_mux_indvar_flatten_phi_fu_165_p4 );

    SC_METHOD(thread_add_ln218_fu_344_p2);
    sensitive << ( mul_ln218_reg_554 );
    sensitive << ( zext_ln214_fu_341_p1 );

    SC_METHOD(thread_add_ln219_1_fu_262_p2);
    sensitive << ( ap_phi_mux_k_0_phi_fu_176_p4 );

    SC_METHOD(thread_add_ln219_fu_354_p2);
    sensitive << ( select_ln220_reg_534 );

    SC_METHOD(thread_add_ln220_1_fu_375_p2);
    sensitive << ( mul_ln218_reg_554 );
    sensitive << ( zext_ln220_2_fu_371_p1 );

    SC_METHOD(thread_add_ln237_fu_443_p2);
    sensitive << ( zext_ln228_reg_639 );

    SC_METHOD(thread_add_ln241_fu_469_p2);
    sensitive << ( cp_1_load_reg_669 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);

    SC_METHOD(thread_ap_block_pp1_stage1);

    SC_METHOD(thread_ap_block_pp1_stage1_11001);

    SC_METHOD(thread_ap_block_pp1_stage1_subdone);

    SC_METHOD(thread_ap_block_state10_pp1_stage1_iter1);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state5_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state7_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state8_pp1_stage1_iter0);

    SC_METHOD(thread_ap_block_state9_pp1_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln211_fu_238_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state7);
    sensitive << ( icmp_ln228_fu_411_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_187_p4);
    sensitive << ( i_0_reg_183 );
    sensitive << ( icmp_ln211_reg_520 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( select_ln220_2_reg_548 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_i_1_phi_fu_231_p4);
    sensitive << ( i_1_reg_227 );
    sensitive << ( icmp_ln228_reg_630 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( i_2_reg_634 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_ap_phi_mux_indvar_flatten_phi_fu_165_p4);
    sensitive << ( indvar_flatten_reg_161 );
    sensitive << ( icmp_ln211_reg_520 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( add_ln211_reg_524 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_j_0_phi_fu_220_p4);
    sensitive << ( j_0_reg_216 );
    sensitive << ( icmp_ln211_reg_520 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( j_reg_600 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_k_0_phi_fu_176_p4);
    sensitive << ( k_0_reg_172 );
    sensitive << ( icmp_ln211_reg_520 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( select_ln211_reg_570 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_k_1_phi_fu_209_p4);
    sensitive << ( k_1_reg_205 );
    sensitive << ( icmp_ln211_reg_520 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( add_ln219_reg_590 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_x_0_phi_fu_198_p4);
    sensitive << ( x_0_reg_194 );
    sensitive << ( icmp_ln211_reg_520 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( select_ln211_1_reg_575 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_as_address0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( zext_ln218_2_fu_349_p1 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_as_address1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( zext_ln220_3_fu_380_p1 );

    SC_METHOD(thread_as_ce0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_as_ce1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_bs_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( sext_ln240_fu_461_p1 );
    sensitive << ( sext_ln241_fu_474_p1 );

    SC_METHOD(thread_bs_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_bs_d0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( odoarr_load_1_reg_654 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( select_ln243_fu_479_p3 );

    SC_METHOD(thread_bs_we0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( icmp_ln232_reg_660 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_count_fu_502_p2);
    sensitive << ( count_1_fu_62 );

    SC_METHOD(thread_cp_fu_487_p2);
    sensitive << ( cp_1_load_reg_669 );

    SC_METHOD(thread_grp_fu_513_p0);
    sensitive << ( icmp_ln211_reg_520 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_513_p00 );

    SC_METHOD(thread_grp_fu_513_p00);
    sensitive << ( select_ln220_2_reg_548 );

    SC_METHOD(thread_grp_fu_513_p1);
    sensitive << ( icmp_ln211_reg_520 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_grp_fu_513_p2);
    sensitive << ( icmp_ln211_reg_520 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( zext_ln214_reg_580 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_i_2_fu_417_p2);
    sensitive << ( ap_phi_mux_i_1_phi_fu_231_p4 );

    SC_METHOD(thread_i_fu_256_p2);
    sensitive << ( ap_phi_mux_i_0_phi_fu_187_p4 );

    SC_METHOD(thread_icmp_ln211_fu_238_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_indvar_flatten_phi_fu_165_p4 );

    SC_METHOD(thread_icmp_ln214_fu_268_p2);
    sensitive << ( icmp_ln211_fu_238_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_j_0_phi_fu_220_p4 );

    SC_METHOD(thread_icmp_ln220_1_fu_314_p2);
    sensitive << ( icmp_ln211_fu_238_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_x_0_phi_fu_198_p4 );

    SC_METHOD(thread_icmp_ln220_fu_308_p2);
    sensitive << ( icmp_ln211_fu_238_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_x_0_phi_fu_198_p4 );

    SC_METHOD(thread_icmp_ln228_fu_411_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_phi_mux_i_1_phi_fu_231_p4 );

    SC_METHOD(thread_icmp_ln232_fu_437_p2);
    sensitive << ( icmp_ln228_reg_630 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( odoarr_q1 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( odoarr_q0 );

    SC_METHOD(thread_icmp_ln237_fu_456_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( odoarr_q1 );
    sensitive << ( odoarr_load_1_reg_654 );
    sensitive << ( icmp_ln232_reg_660 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_j_fu_385_p2);
    sensitive << ( select_ln220_1_reg_540 );

    SC_METHOD(thread_mul_ln218_fu_302_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( mul_ln218_fu_302_p00 );

    SC_METHOD(thread_mul_ln218_fu_302_p00);
    sensitive << ( select_ln220_2_fu_290_p3 );

    SC_METHOD(thread_mul_ln218_fu_302_p2);
    sensitive << ( mul_ln218_fu_302_p0 );

    SC_METHOD(thread_odoarr_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( zext_ln218_1_fu_393_p1 );
    sensitive << ( zext_ln220_1_fu_397_p1 );
    sensitive << ( zext_ln232_fu_427_p1 );

    SC_METHOD(thread_odoarr_address1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( zext_ln232_1_fu_432_p1 );
    sensitive << ( sext_ln237_fu_448_p1 );
    sensitive << ( ap_block_pp1_stage1 );

    SC_METHOD(thread_odoarr_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_odoarr_ce1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );

    SC_METHOD(thread_odoarr_d0);
    sensitive << ( as_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( as_load_1_reg_605 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_odoarr_we0);
    sensitive << ( icmp_ln211_reg_520 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln211_reg_520_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_select_ln211_1_fu_328_p3);
    sensitive << ( icmp_ln214_fu_268_p2 );
    sensitive << ( ap_phi_mux_x_0_phi_fu_198_p4 );
    sensitive << ( x_fu_250_p2 );

    SC_METHOD(thread_select_ln211_fu_320_p3);
    sensitive << ( icmp_ln214_fu_268_p2 );
    sensitive << ( ap_phi_mux_k_0_phi_fu_176_p4 );
    sensitive << ( add_ln219_1_fu_262_p2 );

    SC_METHOD(thread_select_ln220_1_fu_282_p3);
    sensitive << ( icmp_ln214_fu_268_p2 );
    sensitive << ( ap_phi_mux_j_0_phi_fu_220_p4 );

    SC_METHOD(thread_select_ln220_2_fu_290_p3);
    sensitive << ( icmp_ln214_fu_268_p2 );
    sensitive << ( ap_phi_mux_i_0_phi_fu_187_p4 );
    sensitive << ( i_fu_256_p2 );

    SC_METHOD(thread_select_ln220_3_fu_336_p3);
    sensitive << ( icmp_ln214_reg_529 );
    sensitive << ( icmp_ln220_reg_560 );
    sensitive << ( icmp_ln220_1_reg_565 );

    SC_METHOD(thread_select_ln220_4_fu_364_p3);
    sensitive << ( select_ln220_1_reg_540 );
    sensitive << ( select_ln220_3_fu_336_p3 );
    sensitive << ( sub_ln220_fu_359_p2 );

    SC_METHOD(thread_select_ln220_fu_274_p3);
    sensitive << ( icmp_ln214_fu_268_p2 );
    sensitive << ( ap_phi_mux_k_1_phi_fu_209_p4 );
    sensitive << ( add_ln219_1_fu_262_p2 );

    SC_METHOD(thread_select_ln243_fu_479_p3);
    sensitive << ( icmp_ln237_reg_675 );
    sensitive << ( count_1_fu_62 );

    SC_METHOD(thread_sext_ln237_fu_448_p1);
    sensitive << ( add_ln237_fu_443_p2 );

    SC_METHOD(thread_sext_ln240_fu_461_p0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( cp_1_fu_66 );

    SC_METHOD(thread_sext_ln240_fu_461_p1);
    sensitive << ( sext_ln240_fu_461_p0 );

    SC_METHOD(thread_sext_ln241_fu_474_p1);
    sensitive << ( add_ln241_fu_469_p2 );

    SC_METHOD(thread_sub_ln220_fu_359_p2);
    sensitive << ( select_ln220_1_reg_540 );

    SC_METHOD(thread_x_fu_250_p2);
    sensitive << ( ap_phi_mux_x_0_phi_fu_198_p4 );

    SC_METHOD(thread_zext_ln214_fu_341_p1);
    sensitive << ( select_ln220_1_reg_540 );

    SC_METHOD(thread_zext_ln218_1_fu_393_p1);
    sensitive << ( select_ln220_reg_534 );

    SC_METHOD(thread_zext_ln218_2_fu_349_p1);
    sensitive << ( add_ln218_fu_344_p2 );

    SC_METHOD(thread_zext_ln220_1_fu_397_p1);
    sensitive << ( add_ln220_reg_610 );

    SC_METHOD(thread_zext_ln220_2_fu_371_p1);
    sensitive << ( select_ln220_4_fu_364_p3 );

    SC_METHOD(thread_zext_ln220_3_fu_380_p1);
    sensitive << ( add_ln220_1_fu_375_p2 );

    SC_METHOD(thread_zext_ln228_fu_423_p1);
    sensitive << ( ap_phi_mux_i_1_phi_fu_231_p4 );

    SC_METHOD(thread_zext_ln232_1_fu_432_p1);
    sensitive << ( ap_phi_mux_i_1_phi_fu_231_p4 );

    SC_METHOD(thread_zext_ln232_fu_427_p1);
    sensitive << ( i_2_fu_417_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln211_fu_238_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln228_fu_411_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage1_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "compressf_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, as_address0, "(port)as_address0");
    sc_trace(mVcdFile, as_ce0, "(port)as_ce0");
    sc_trace(mVcdFile, as_q0, "(port)as_q0");
    sc_trace(mVcdFile, as_address1, "(port)as_address1");
    sc_trace(mVcdFile, as_ce1, "(port)as_ce1");
    sc_trace(mVcdFile, as_q1, "(port)as_q1");
    sc_trace(mVcdFile, bs_address0, "(port)bs_address0");
    sc_trace(mVcdFile, bs_ce0, "(port)bs_ce0");
    sc_trace(mVcdFile, bs_we0, "(port)bs_we0");
    sc_trace(mVcdFile, bs_d0, "(port)bs_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, indvar_flatten_reg_161, "indvar_flatten_reg_161");
    sc_trace(mVcdFile, k_0_reg_172, "k_0_reg_172");
    sc_trace(mVcdFile, i_0_reg_183, "i_0_reg_183");
    sc_trace(mVcdFile, x_0_reg_194, "x_0_reg_194");
    sc_trace(mVcdFile, k_1_reg_205, "k_1_reg_205");
    sc_trace(mVcdFile, j_0_reg_216, "j_0_reg_216");
    sc_trace(mVcdFile, i_1_reg_227, "i_1_reg_227");
    sc_trace(mVcdFile, icmp_ln211_fu_238_p2, "icmp_ln211_fu_238_p2");
    sc_trace(mVcdFile, icmp_ln211_reg_520, "icmp_ln211_reg_520");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln211_reg_520_pp0_iter1_reg, "icmp_ln211_reg_520_pp0_iter1_reg");
    sc_trace(mVcdFile, add_ln211_fu_244_p2, "add_ln211_fu_244_p2");
    sc_trace(mVcdFile, add_ln211_reg_524, "add_ln211_reg_524");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, icmp_ln214_fu_268_p2, "icmp_ln214_fu_268_p2");
    sc_trace(mVcdFile, icmp_ln214_reg_529, "icmp_ln214_reg_529");
    sc_trace(mVcdFile, select_ln220_fu_274_p3, "select_ln220_fu_274_p3");
    sc_trace(mVcdFile, select_ln220_reg_534, "select_ln220_reg_534");
    sc_trace(mVcdFile, select_ln220_1_fu_282_p3, "select_ln220_1_fu_282_p3");
    sc_trace(mVcdFile, select_ln220_1_reg_540, "select_ln220_1_reg_540");
    sc_trace(mVcdFile, select_ln220_2_fu_290_p3, "select_ln220_2_fu_290_p3");
    sc_trace(mVcdFile, select_ln220_2_reg_548, "select_ln220_2_reg_548");
    sc_trace(mVcdFile, mul_ln218_fu_302_p2, "mul_ln218_fu_302_p2");
    sc_trace(mVcdFile, mul_ln218_reg_554, "mul_ln218_reg_554");
    sc_trace(mVcdFile, icmp_ln220_fu_308_p2, "icmp_ln220_fu_308_p2");
    sc_trace(mVcdFile, icmp_ln220_reg_560, "icmp_ln220_reg_560");
    sc_trace(mVcdFile, icmp_ln220_1_fu_314_p2, "icmp_ln220_1_fu_314_p2");
    sc_trace(mVcdFile, icmp_ln220_1_reg_565, "icmp_ln220_1_reg_565");
    sc_trace(mVcdFile, select_ln211_fu_320_p3, "select_ln211_fu_320_p3");
    sc_trace(mVcdFile, select_ln211_reg_570, "select_ln211_reg_570");
    sc_trace(mVcdFile, select_ln211_1_fu_328_p3, "select_ln211_1_fu_328_p3");
    sc_trace(mVcdFile, select_ln211_1_reg_575, "select_ln211_1_reg_575");
    sc_trace(mVcdFile, zext_ln214_fu_341_p1, "zext_ln214_fu_341_p1");
    sc_trace(mVcdFile, zext_ln214_reg_580, "zext_ln214_reg_580");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage1_iter0, "ap_block_state3_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage1_iter1, "ap_block_state5_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, add_ln219_fu_354_p2, "add_ln219_fu_354_p2");
    sc_trace(mVcdFile, add_ln219_reg_590, "add_ln219_reg_590");
    sc_trace(mVcdFile, j_fu_385_p2, "j_fu_385_p2");
    sc_trace(mVcdFile, j_reg_600, "j_reg_600");
    sc_trace(mVcdFile, as_load_1_reg_605, "as_load_1_reg_605");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, grp_fu_513_p3, "grp_fu_513_p3");
    sc_trace(mVcdFile, add_ln220_reg_610, "add_ln220_reg_610");
    sc_trace(mVcdFile, icmp_ln228_fu_411_p2, "icmp_ln228_fu_411_p2");
    sc_trace(mVcdFile, icmp_ln228_reg_630, "icmp_ln228_reg_630");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state7_pp1_stage0_iter0, "ap_block_state7_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state9_pp1_stage0_iter1, "ap_block_state9_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, i_2_fu_417_p2, "i_2_fu_417_p2");
    sc_trace(mVcdFile, i_2_reg_634, "i_2_reg_634");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, zext_ln228_fu_423_p1, "zext_ln228_fu_423_p1");
    sc_trace(mVcdFile, zext_ln228_reg_639, "zext_ln228_reg_639");
    sc_trace(mVcdFile, odoarr_q1, "odoarr_q1");
    sc_trace(mVcdFile, odoarr_load_1_reg_654, "odoarr_load_1_reg_654");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage1, "ap_CS_fsm_pp1_stage1");
    sc_trace(mVcdFile, ap_block_state8_pp1_stage1_iter0, "ap_block_state8_pp1_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp1_stage1_iter1, "ap_block_state10_pp1_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage1_11001, "ap_block_pp1_stage1_11001");
    sc_trace(mVcdFile, icmp_ln232_fu_437_p2, "icmp_ln232_fu_437_p2");
    sc_trace(mVcdFile, icmp_ln232_reg_660, "icmp_ln232_reg_660");
    sc_trace(mVcdFile, cp_1_load_reg_669, "cp_1_load_reg_669");
    sc_trace(mVcdFile, icmp_ln237_fu_456_p2, "icmp_ln237_fu_456_p2");
    sc_trace(mVcdFile, icmp_ln237_reg_675, "icmp_ln237_reg_675");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state7, "ap_condition_pp1_exit_iter0_state7");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage1_subdone, "ap_block_pp1_stage1_subdone");
    sc_trace(mVcdFile, odoarr_address0, "odoarr_address0");
    sc_trace(mVcdFile, odoarr_ce0, "odoarr_ce0");
    sc_trace(mVcdFile, odoarr_we0, "odoarr_we0");
    sc_trace(mVcdFile, odoarr_d0, "odoarr_d0");
    sc_trace(mVcdFile, odoarr_q0, "odoarr_q0");
    sc_trace(mVcdFile, odoarr_address1, "odoarr_address1");
    sc_trace(mVcdFile, odoarr_ce1, "odoarr_ce1");
    sc_trace(mVcdFile, ap_phi_mux_indvar_flatten_phi_fu_165_p4, "ap_phi_mux_indvar_flatten_phi_fu_165_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_mux_k_0_phi_fu_176_p4, "ap_phi_mux_k_0_phi_fu_176_p4");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_187_p4, "ap_phi_mux_i_0_phi_fu_187_p4");
    sc_trace(mVcdFile, ap_phi_mux_x_0_phi_fu_198_p4, "ap_phi_mux_x_0_phi_fu_198_p4");
    sc_trace(mVcdFile, ap_phi_mux_k_1_phi_fu_209_p4, "ap_phi_mux_k_1_phi_fu_209_p4");
    sc_trace(mVcdFile, ap_phi_mux_j_0_phi_fu_220_p4, "ap_phi_mux_j_0_phi_fu_220_p4");
    sc_trace(mVcdFile, ap_phi_mux_i_1_phi_fu_231_p4, "ap_phi_mux_i_1_phi_fu_231_p4");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, zext_ln218_2_fu_349_p1, "zext_ln218_2_fu_349_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, zext_ln220_3_fu_380_p1, "zext_ln220_3_fu_380_p1");
    sc_trace(mVcdFile, zext_ln218_1_fu_393_p1, "zext_ln218_1_fu_393_p1");
    sc_trace(mVcdFile, zext_ln220_1_fu_397_p1, "zext_ln220_1_fu_397_p1");
    sc_trace(mVcdFile, zext_ln232_fu_427_p1, "zext_ln232_fu_427_p1");
    sc_trace(mVcdFile, zext_ln232_1_fu_432_p1, "zext_ln232_1_fu_432_p1");
    sc_trace(mVcdFile, sext_ln237_fu_448_p1, "sext_ln237_fu_448_p1");
    sc_trace(mVcdFile, ap_block_pp1_stage1, "ap_block_pp1_stage1");
    sc_trace(mVcdFile, sext_ln240_fu_461_p1, "sext_ln240_fu_461_p1");
    sc_trace(mVcdFile, sext_ln241_fu_474_p1, "sext_ln241_fu_474_p1");
    sc_trace(mVcdFile, count_1_fu_62, "count_1_fu_62");
    sc_trace(mVcdFile, select_ln243_fu_479_p3, "select_ln243_fu_479_p3");
    sc_trace(mVcdFile, count_fu_502_p2, "count_fu_502_p2");
    sc_trace(mVcdFile, cp_1_fu_66, "cp_1_fu_66");
    sc_trace(mVcdFile, cp_fu_487_p2, "cp_fu_487_p2");
    sc_trace(mVcdFile, add_ln219_1_fu_262_p2, "add_ln219_1_fu_262_p2");
    sc_trace(mVcdFile, i_fu_256_p2, "i_fu_256_p2");
    sc_trace(mVcdFile, mul_ln218_fu_302_p0, "mul_ln218_fu_302_p0");
    sc_trace(mVcdFile, x_fu_250_p2, "x_fu_250_p2");
    sc_trace(mVcdFile, add_ln218_fu_344_p2, "add_ln218_fu_344_p2");
    sc_trace(mVcdFile, select_ln220_3_fu_336_p3, "select_ln220_3_fu_336_p3");
    sc_trace(mVcdFile, sub_ln220_fu_359_p2, "sub_ln220_fu_359_p2");
    sc_trace(mVcdFile, select_ln220_4_fu_364_p3, "select_ln220_4_fu_364_p3");
    sc_trace(mVcdFile, zext_ln220_2_fu_371_p1, "zext_ln220_2_fu_371_p1");
    sc_trace(mVcdFile, add_ln220_1_fu_375_p2, "add_ln220_1_fu_375_p2");
    sc_trace(mVcdFile, add_ln237_fu_443_p2, "add_ln237_fu_443_p2");
    sc_trace(mVcdFile, sext_ln240_fu_461_p0, "sext_ln240_fu_461_p0");
    sc_trace(mVcdFile, add_ln241_fu_469_p2, "add_ln241_fu_469_p2");
    sc_trace(mVcdFile, grp_fu_513_p0, "grp_fu_513_p0");
    sc_trace(mVcdFile, grp_fu_513_p1, "grp_fu_513_p1");
    sc_trace(mVcdFile, grp_fu_513_p2, "grp_fu_513_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, grp_fu_513_p00, "grp_fu_513_p00");
    sc_trace(mVcdFile, mul_ln218_fu_302_p00, "mul_ln218_fu_302_p00");
#endif

    }
    mHdltvinHandle.open("compressf.hdltvin.dat");
    mHdltvoutHandle.open("compressf.hdltvout.dat");
}

compressf::~compressf() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete odoarr_U;
    delete compressf_mac_mulbkb_U1;
}

void compressf::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state7.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln232_reg_660.read(), ap_const_lv1_1))) {
        count_1_fu_62 = count_fu_502_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln232_reg_660.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        count_1_fu_62 = select_ln243_fu_479_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        count_1_fu_62 = ap_const_lv32_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln232_reg_660.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        cp_1_fu_66 = cp_fu_487_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cp_1_fu_66 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_0_reg_183 = select_ln220_2_reg_548.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_183 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_1_reg_227 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln228_reg_630.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        i_1_reg_227 = i_2_reg_634.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        indvar_flatten_reg_161 = add_ln211_reg_524.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvar_flatten_reg_161 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        j_0_reg_216 = j_reg_600.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_216 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        k_0_reg_172 = select_ln211_reg_570.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_0_reg_172 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        k_1_reg_205 = add_ln219_reg_590.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_1_reg_205 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        x_0_reg_194 = select_ln211_1_reg_575.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        x_0_reg_194 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        add_ln211_reg_524 = add_ln211_fu_244_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0))) {
        add_ln219_reg_590 = add_ln219_fu_354_p2.read();
        j_reg_600 = j_fu_385_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        add_ln220_reg_610 = grp_fu_513_p3.read();
        as_load_1_reg_605 = as_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln232_reg_660.read()))) {
        cp_1_load_reg_669 = cp_1_fu_66.read();
        icmp_ln237_reg_675 = icmp_ln237_fu_456_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        i_2_reg_634 = i_2_fu_417_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln211_reg_520 = icmp_ln211_fu_238_p2.read();
        icmp_ln211_reg_520_pp0_iter1_reg = icmp_ln211_reg_520.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln211_fu_238_p2.read(), ap_const_lv1_0))) {
        icmp_ln214_reg_529 = icmp_ln214_fu_268_p2.read();
        icmp_ln220_1_reg_565 = icmp_ln220_1_fu_314_p2.read();
        icmp_ln220_reg_560 = icmp_ln220_fu_308_p2.read();
        mul_ln218_reg_554 = mul_ln218_fu_302_p2.read();
        select_ln220_1_reg_540 = select_ln220_1_fu_282_p3.read();
        select_ln220_reg_534 = select_ln220_fu_274_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln228_reg_630 = icmp_ln228_fu_411_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln228_reg_630.read()))) {
        icmp_ln232_reg_660 = icmp_ln232_fu_437_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln228_reg_630.read()))) {
        odoarr_load_1_reg_654 = odoarr_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln211_fu_238_p2.read(), ap_const_lv1_0))) {
        select_ln211_1_reg_575 = select_ln211_1_fu_328_p3.read();
        select_ln211_reg_570 = select_ln211_fu_320_p3.read();
        select_ln220_2_reg_548 = select_ln220_2_fu_290_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0))) {
        zext_ln214_reg_580 = zext_ln214_fu_341_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln228_fu_411_p2.read()))) {
        zext_ln228_reg_639 = zext_ln228_fu_423_p1.read();
    }
}

void compressf::thread_add_ln211_fu_244_p2() {
    add_ln211_fu_244_p2 = (!ap_phi_mux_indvar_flatten_phi_fu_165_p4.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(ap_phi_mux_indvar_flatten_phi_fu_165_p4.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void compressf::thread_add_ln218_fu_344_p2() {
    add_ln218_fu_344_p2 = (!mul_ln218_reg_554.read().is_01() || !zext_ln214_fu_341_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(mul_ln218_reg_554.read()) + sc_biguint<10>(zext_ln214_fu_341_p1.read()));
}

void compressf::thread_add_ln219_1_fu_262_p2() {
    add_ln219_1_fu_262_p2 = (!ap_phi_mux_k_0_phi_fu_176_p4.read().is_01() || !ap_const_lv10_19.is_01())? sc_lv<10>(): (sc_biguint<10>(ap_phi_mux_k_0_phi_fu_176_p4.read()) + sc_biguint<10>(ap_const_lv10_19));
}

void compressf::thread_add_ln219_fu_354_p2() {
    add_ln219_fu_354_p2 = (!select_ln220_reg_534.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(select_ln220_reg_534.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void compressf::thread_add_ln220_1_fu_375_p2() {
    add_ln220_1_fu_375_p2 = (!mul_ln218_reg_554.read().is_01() || !zext_ln220_2_fu_371_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(mul_ln218_reg_554.read()) + sc_biguint<10>(zext_ln220_2_fu_371_p1.read()));
}

void compressf::thread_add_ln237_fu_443_p2() {
    add_ln237_fu_443_p2 = (!zext_ln228_reg_639.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<11>(): (sc_biguint<11>(zext_ln228_reg_639.read()) + sc_bigint<11>(ap_const_lv11_7FF));
}

void compressf::thread_add_ln241_fu_469_p2() {
    add_ln241_fu_469_p2 = (!cp_1_load_reg_669.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(cp_1_load_reg_669.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void compressf::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void compressf::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void compressf::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[4];
}

void compressf::thread_ap_CS_fsm_pp1_stage1() {
    ap_CS_fsm_pp1_stage1 = ap_CS_fsm.read()[5];
}

void compressf::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void compressf::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[6];
}

void compressf::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[3];
}

void compressf::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_pp1_stage1() {
    ap_block_pp1_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_pp1_stage1_11001() {
    ap_block_pp1_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_pp1_stage1_subdone() {
    ap_block_pp1_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_state10_pp1_stage1_iter1() {
    ap_block_state10_pp1_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_state3_pp0_stage1_iter0() {
    ap_block_state3_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_state5_pp0_stage1_iter1() {
    ap_block_state5_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_state7_pp1_stage0_iter0() {
    ap_block_state7_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_state8_pp1_stage1_iter0() {
    ap_block_state8_pp1_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_block_state9_pp1_stage0_iter1() {
    ap_block_state9_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void compressf::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln211_fu_238_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void compressf::thread_ap_condition_pp1_exit_iter0_state7() {
    if (esl_seteq<1,1,1>(icmp_ln228_fu_411_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state7 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state7 = ap_const_logic_0;
    }
}

void compressf::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void compressf::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void compressf::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void compressf::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void compressf::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void compressf::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void compressf::thread_ap_phi_mux_i_0_phi_fu_187_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_0_phi_fu_187_p4 = select_ln220_2_reg_548.read();
    } else {
        ap_phi_mux_i_0_phi_fu_187_p4 = i_0_reg_183.read();
    }
}

void compressf::thread_ap_phi_mux_i_1_phi_fu_231_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln228_reg_630.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_1_phi_fu_231_p4 = i_2_reg_634.read();
    } else {
        ap_phi_mux_i_1_phi_fu_231_p4 = i_1_reg_227.read();
    }
}

void compressf::thread_ap_phi_mux_indvar_flatten_phi_fu_165_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_indvar_flatten_phi_fu_165_p4 = add_ln211_reg_524.read();
    } else {
        ap_phi_mux_indvar_flatten_phi_fu_165_p4 = indvar_flatten_reg_161.read();
    }
}

void compressf::thread_ap_phi_mux_j_0_phi_fu_220_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_j_0_phi_fu_220_p4 = j_reg_600.read();
    } else {
        ap_phi_mux_j_0_phi_fu_220_p4 = j_0_reg_216.read();
    }
}

void compressf::thread_ap_phi_mux_k_0_phi_fu_176_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_k_0_phi_fu_176_p4 = select_ln211_reg_570.read();
    } else {
        ap_phi_mux_k_0_phi_fu_176_p4 = k_0_reg_172.read();
    }
}

void compressf::thread_ap_phi_mux_k_1_phi_fu_209_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_k_1_phi_fu_209_p4 = add_ln219_reg_590.read();
    } else {
        ap_phi_mux_k_1_phi_fu_209_p4 = k_1_reg_205.read();
    }
}

void compressf::thread_ap_phi_mux_x_0_phi_fu_198_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_x_0_phi_fu_198_p4 = select_ln211_1_reg_575.read();
    } else {
        ap_phi_mux_x_0_phi_fu_198_p4 = x_0_reg_194.read();
    }
}

void compressf::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void compressf::thread_as_address0() {
    as_address0 =  (sc_lv<10>) (zext_ln218_2_fu_349_p1.read());
}

void compressf::thread_as_address1() {
    as_address1 =  (sc_lv<10>) (zext_ln220_3_fu_380_p1.read());
}

void compressf::thread_as_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        as_ce0 = ap_const_logic_1;
    } else {
        as_ce0 = ap_const_logic_0;
    }
}

void compressf::thread_as_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        as_ce1 = ap_const_logic_1;
    } else {
        as_ce1 = ap_const_logic_0;
    }
}

void compressf::thread_bs_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0))) {
            bs_address0 =  (sc_lv<10>) (sext_ln241_fu_474_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
            bs_address0 =  (sc_lv<10>) (sext_ln240_fu_461_p1.read());
        } else {
            bs_address0 = "XXXXXXXXXX";
        }
    } else {
        bs_address0 = "XXXXXXXXXX";
    }
}

void compressf::thread_bs_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())))) {
        bs_ce0 = ap_const_logic_1;
    } else {
        bs_ce0 = ap_const_logic_0;
    }
}

void compressf::thread_bs_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0))) {
            bs_d0 = select_ln243_fu_479_p3.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
            bs_d0 = odoarr_load_1_reg_654.read();
        } else {
            bs_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        bs_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void compressf::thread_bs_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln232_reg_660.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln232_reg_660.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())))) {
        bs_we0 = ap_const_logic_1;
    } else {
        bs_we0 = ap_const_logic_0;
    }
}

void compressf::thread_count_fu_502_p2() {
    count_fu_502_p2 = (!count_1_fu_62.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(count_1_fu_62.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void compressf::thread_cp_fu_487_p2() {
    cp_fu_487_p2 = (!cp_1_load_reg_669.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<32>(): (sc_bigint<32>(cp_1_load_reg_669.read()) + sc_biguint<32>(ap_const_lv32_2));
}

void compressf::thread_grp_fu_513_p0() {
    grp_fu_513_p0 =  (sc_lv<5>) (grp_fu_513_p00.read());
}

void compressf::thread_grp_fu_513_p00() {
    grp_fu_513_p00 = esl_zext<10,5>(select_ln220_2_reg_548.read());
}

void compressf::thread_grp_fu_513_p1() {
    grp_fu_513_p1 =  (sc_lv<6>) (ap_const_lv10_19);
}

void compressf::thread_grp_fu_513_p2() {
    grp_fu_513_p2 =  (sc_lv<5>) (zext_ln214_reg_580.read());
}

void compressf::thread_i_2_fu_417_p2() {
    i_2_fu_417_p2 = (!ap_phi_mux_i_1_phi_fu_231_p4.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(ap_phi_mux_i_1_phi_fu_231_p4.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void compressf::thread_i_fu_256_p2() {
    i_fu_256_p2 = (!ap_phi_mux_i_0_phi_fu_187_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(ap_phi_mux_i_0_phi_fu_187_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void compressf::thread_icmp_ln211_fu_238_p2() {
    icmp_ln211_fu_238_p2 = (!ap_phi_mux_indvar_flatten_phi_fu_165_p4.read().is_01() || !ap_const_lv10_271.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_indvar_flatten_phi_fu_165_p4.read() == ap_const_lv10_271);
}

void compressf::thread_icmp_ln214_fu_268_p2() {
    icmp_ln214_fu_268_p2 = (!ap_phi_mux_j_0_phi_fu_220_p4.read().is_01() || !ap_const_lv5_19.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_j_0_phi_fu_220_p4.read() == ap_const_lv5_19);
}

void compressf::thread_icmp_ln220_1_fu_314_p2() {
    icmp_ln220_1_fu_314_p2 = (!ap_phi_mux_x_0_phi_fu_198_p4.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_x_0_phi_fu_198_p4.read() == ap_const_lv32_0);
}

void compressf::thread_icmp_ln220_fu_308_p2() {
    icmp_ln220_fu_308_p2 = (!ap_phi_mux_x_0_phi_fu_198_p4.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_x_0_phi_fu_198_p4.read() == ap_const_lv32_1);
}

void compressf::thread_icmp_ln228_fu_411_p2() {
    icmp_ln228_fu_411_p2 = (!ap_phi_mux_i_1_phi_fu_231_p4.read().is_01() || !ap_const_lv10_271.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_1_phi_fu_231_p4.read() == ap_const_lv10_271);
}

void compressf::thread_icmp_ln232_fu_437_p2() {
    icmp_ln232_fu_437_p2 = (!odoarr_q0.read().is_01() || !odoarr_q1.read().is_01())? sc_lv<1>(): sc_lv<1>(odoarr_q0.read() == odoarr_q1.read());
}

void compressf::thread_icmp_ln237_fu_456_p2() {
    icmp_ln237_fu_456_p2 = (!odoarr_q1.read().is_01() || !odoarr_load_1_reg_654.read().is_01())? sc_lv<1>(): sc_lv<1>(odoarr_q1.read() == odoarr_load_1_reg_654.read());
}

void compressf::thread_j_fu_385_p2() {
    j_fu_385_p2 = (!select_ln220_1_reg_540.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(select_ln220_1_reg_540.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void compressf::thread_mul_ln218_fu_302_p0() {
    mul_ln218_fu_302_p0 =  (sc_lv<5>) (mul_ln218_fu_302_p00.read());
}

void compressf::thread_mul_ln218_fu_302_p00() {
    mul_ln218_fu_302_p00 = esl_zext<10,5>(select_ln220_2_fu_290_p3.read());
}

void compressf::thread_mul_ln218_fu_302_p2() {
    mul_ln218_fu_302_p2 = (!mul_ln218_fu_302_p0.read().is_01() || !ap_const_lv10_19.is_01())? sc_lv<10>(): sc_biguint<5>(mul_ln218_fu_302_p0.read()) * sc_biguint<10>(ap_const_lv10_19);
}

void compressf::thread_odoarr_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        odoarr_address0 =  (sc_lv<10>) (zext_ln232_fu_427_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        odoarr_address0 =  (sc_lv<10>) (zext_ln220_1_fu_397_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        odoarr_address0 =  (sc_lv<10>) (zext_ln218_1_fu_393_p1.read());
    } else {
        odoarr_address0 = "XXXXXXXXXX";
    }
}

void compressf::thread_odoarr_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0))) {
            odoarr_address1 =  (sc_lv<10>) (sext_ln237_fu_448_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
            odoarr_address1 =  (sc_lv<10>) (zext_ln232_1_fu_432_p1.read());
        } else {
            odoarr_address1 = "XXXXXXXXXX";
        }
    } else {
        odoarr_address1 = "XXXXXXXXXX";
    }
}

void compressf::thread_odoarr_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        odoarr_ce0 = ap_const_logic_1;
    } else {
        odoarr_ce0 = ap_const_logic_0;
    }
}

void compressf::thread_odoarr_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0)))) {
        odoarr_ce1 = ap_const_logic_1;
    } else {
        odoarr_ce1 = ap_const_logic_0;
    }
}

void compressf::thread_odoarr_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            odoarr_d0 = as_load_1_reg_605.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            odoarr_d0 = as_q0.read();
        } else {
            odoarr_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        odoarr_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void compressf::thread_odoarr_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln211_reg_520.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln211_reg_520_pp0_iter1_reg.read(), ap_const_lv1_0)))) {
        odoarr_we0 = ap_const_logic_1;
    } else {
        odoarr_we0 = ap_const_logic_0;
    }
}

void compressf::thread_select_ln211_1_fu_328_p3() {
    select_ln211_1_fu_328_p3 = (!icmp_ln214_fu_268_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln214_fu_268_p2.read()[0].to_bool())? x_fu_250_p2.read(): ap_phi_mux_x_0_phi_fu_198_p4.read());
}

void compressf::thread_select_ln211_fu_320_p3() {
    select_ln211_fu_320_p3 = (!icmp_ln214_fu_268_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_ln214_fu_268_p2.read()[0].to_bool())? add_ln219_1_fu_262_p2.read(): ap_phi_mux_k_0_phi_fu_176_p4.read());
}

void compressf::thread_select_ln220_1_fu_282_p3() {
    select_ln220_1_fu_282_p3 = (!icmp_ln214_fu_268_p2.read()[0].is_01())? sc_lv<5>(): ((icmp_ln214_fu_268_p2.read()[0].to_bool())? ap_const_lv5_0: ap_phi_mux_j_0_phi_fu_220_p4.read());
}

void compressf::thread_select_ln220_2_fu_290_p3() {
    select_ln220_2_fu_290_p3 = (!icmp_ln214_fu_268_p2.read()[0].is_01())? sc_lv<5>(): ((icmp_ln214_fu_268_p2.read()[0].to_bool())? i_fu_256_p2.read(): ap_phi_mux_i_0_phi_fu_187_p4.read());
}

void compressf::thread_select_ln220_3_fu_336_p3() {
    select_ln220_3_fu_336_p3 = (!icmp_ln214_reg_529.read()[0].is_01())? sc_lv<1>(): ((icmp_ln214_reg_529.read()[0].to_bool())? icmp_ln220_reg_560.read(): icmp_ln220_1_reg_565.read());
}

void compressf::thread_select_ln220_4_fu_364_p3() {
    select_ln220_4_fu_364_p3 = (!select_ln220_3_fu_336_p3.read()[0].is_01())? sc_lv<5>(): ((select_ln220_3_fu_336_p3.read()[0].to_bool())? select_ln220_1_reg_540.read(): sub_ln220_fu_359_p2.read());
}

void compressf::thread_select_ln220_fu_274_p3() {
    select_ln220_fu_274_p3 = (!icmp_ln214_fu_268_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_ln214_fu_268_p2.read()[0].to_bool())? add_ln219_1_fu_262_p2.read(): ap_phi_mux_k_1_phi_fu_209_p4.read());
}

void compressf::thread_select_ln243_fu_479_p3() {
    select_ln243_fu_479_p3 = (!icmp_ln237_reg_675.read()[0].is_01())? sc_lv<32>(): ((icmp_ln237_reg_675.read()[0].to_bool())? count_1_fu_62.read(): ap_const_lv32_1);
}

void compressf::thread_sext_ln237_fu_448_p1() {
    sext_ln237_fu_448_p1 = esl_sext<64,11>(add_ln237_fu_443_p2.read());
}

void compressf::thread_sext_ln240_fu_461_p0() {
    sext_ln240_fu_461_p0 = cp_1_fu_66.read();
}

void compressf::thread_sext_ln240_fu_461_p1() {
    sext_ln240_fu_461_p1 = esl_sext<64,32>(sext_ln240_fu_461_p0.read());
}

void compressf::thread_sext_ln241_fu_474_p1() {
    sext_ln241_fu_474_p1 = esl_sext<64,32>(add_ln241_fu_469_p2.read());
}

void compressf::thread_sub_ln220_fu_359_p2() {
    sub_ln220_fu_359_p2 = (!ap_const_lv5_18.is_01() || !select_ln220_1_reg_540.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_18) - sc_biguint<5>(select_ln220_1_reg_540.read()));
}

void compressf::thread_x_fu_250_p2() {
    x_fu_250_p2 = (ap_phi_mux_x_0_phi_fu_198_p4.read() ^ ap_const_lv32_1);
}

void compressf::thread_zext_ln214_fu_341_p1() {
    zext_ln214_fu_341_p1 = esl_zext<10,5>(select_ln220_1_reg_540.read());
}

void compressf::thread_zext_ln218_1_fu_393_p1() {
    zext_ln218_1_fu_393_p1 = esl_zext<64,10>(select_ln220_reg_534.read());
}

void compressf::thread_zext_ln218_2_fu_349_p1() {
    zext_ln218_2_fu_349_p1 = esl_zext<64,10>(add_ln218_fu_344_p2.read());
}

void compressf::thread_zext_ln220_1_fu_397_p1() {
    zext_ln220_1_fu_397_p1 = esl_zext<64,10>(add_ln220_reg_610.read());
}

void compressf::thread_zext_ln220_2_fu_371_p1() {
    zext_ln220_2_fu_371_p1 = esl_zext<10,5>(select_ln220_4_fu_364_p3.read());
}

void compressf::thread_zext_ln220_3_fu_380_p1() {
    zext_ln220_3_fu_380_p1 = esl_zext<64,10>(add_ln220_1_fu_375_p2.read());
}

void compressf::thread_zext_ln228_fu_423_p1() {
    zext_ln228_fu_423_p1 = esl_zext<11,10>(ap_phi_mux_i_1_phi_fu_231_p4.read());
}

void compressf::thread_zext_ln232_1_fu_432_p1() {
    zext_ln232_1_fu_432_p1 = esl_zext<64,10>(ap_phi_mux_i_1_phi_fu_231_p4.read());
}

void compressf::thread_zext_ln232_fu_427_p1() {
    zext_ln232_fu_427_p1 = esl_zext<64,10>(i_2_fu_417_p2.read());
}

void compressf::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln211_fu_238_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln211_fu_238_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln228_fu_411_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln228_fu_411_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void compressf::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"as_address0\" :  \"" << as_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"as_ce0\" :  \"" << as_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"as_q0\" :  \"" << as_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"as_address1\" :  \"" << as_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"as_ce1\" :  \"" << as_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"as_q1\" :  \"" << as_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bs_address0\" :  \"" << bs_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bs_ce0\" :  \"" << bs_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bs_we0\" :  \"" << bs_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bs_d0\" :  \"" << bs_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

