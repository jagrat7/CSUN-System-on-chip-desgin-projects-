-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compressf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    as_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    as_ce0 : OUT STD_LOGIC;
    as_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    as_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    as_ce1 : OUT STD_LOGIC;
    as_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    bs_ce0 : OUT STD_LOGIC;
    bs_we0 : OUT STD_LOGIC;
    bs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of compressf is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "compressf,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.775000,HLS_SYN_LAT=2506,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=393,HLS_SYN_LUT=812,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_271 : STD_LOGIC_VECTOR (9 downto 0) := "1001110001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_19 : STD_LOGIC_VECTOR (9 downto 0) := "0000011001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_161 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_0_reg_172 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_183 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_205 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_reg_216 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_227 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln211_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln211_reg_520 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln211_reg_520_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln211_fu_244_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln211_reg_524 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln214_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln220_fu_274_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln220_reg_534 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln220_1_fu_282_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln220_1_reg_540 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln220_2_fu_290_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln220_2_reg_548 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln218_fu_302_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln218_reg_554 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln220_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_1_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln211_fu_320_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln211_reg_570 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln211_1_fu_328_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln211_1_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln214_fu_341_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln214_reg_580 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln219_fu_354_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln219_reg_590 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_fu_385_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_600 : STD_LOGIC_VECTOR (4 downto 0);
    signal as_load_1_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_513_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln220_reg_610 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln228_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln228_reg_630 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_2_fu_417_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_reg_634 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln228_fu_423_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln228_reg_639 : STD_LOGIC_VECTOR (10 downto 0);
    signal odoarr_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal odoarr_load_1_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state8_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln232_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln232_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal cp_1_load_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln237_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal odoarr_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal odoarr_ce0 : STD_LOGIC;
    signal odoarr_we0 : STD_LOGIC;
    signal odoarr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal odoarr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal odoarr_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal odoarr_ce1 : STD_LOGIC;
    signal ap_phi_mux_indvar_flatten_phi_fu_165_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_k_0_phi_fu_176_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i_0_phi_fu_187_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_x_0_phi_fu_198_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_k_1_phi_fu_209_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_j_0_phi_fu_220_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i_1_phi_fu_231_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln218_2_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln220_3_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_1_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_1_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_1_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln237_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal sext_ln240_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln241_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_1_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln243_fu_479_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_1_fu_66 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln219_1_fu_262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_256_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln218_fu_302_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln218_fu_344_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln220_3_fu_336_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln220_fu_359_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln220_4_fu_364_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln220_2_fu_371_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln220_1_fu_375_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln237_fu_443_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln240_fu_461_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln241_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_513_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_513_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_513_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_513_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln218_fu_302_p00 : STD_LOGIC_VECTOR (9 downto 0);

    component compressf_mac_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component compressf_odoarr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    odoarr_U : component compressf_odoarr
    generic map (
        DataWidth => 32,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => odoarr_address0,
        ce0 => odoarr_ce0,
        we0 => odoarr_we0,
        d0 => odoarr_d0,
        q0 => odoarr_q0,
        address1 => odoarr_address1,
        ce1 => odoarr_ce1,
        q1 => odoarr_q1);

    compressf_mac_mulbkb_U1 : component compressf_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_513_p0,
        din1 => grp_fu_513_p1,
        din2 => grp_fu_513_p2,
        dout => grp_fu_513_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count_1_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln232_reg_660 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
                count_1_fu_62 <= count_fu_502_p2;
            elsif (((icmp_ln232_reg_660 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
                count_1_fu_62 <= select_ln243_fu_479_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                count_1_fu_62 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    cp_1_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_reg_660 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
                cp_1_fu_66 <= cp_fu_487_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                cp_1_fu_66 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_183 <= select_ln220_2_reg_548;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_183 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_1_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_227 <= ap_const_lv10_0;
            elsif (((icmp_ln228_reg_630 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_reg_227 <= i_2_reg_634;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_161 <= add_ln211_reg_524;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_161 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_0_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_216 <= j_reg_600;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_216 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_0_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                k_0_reg_172 <= select_ln211_reg_570;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_reg_172 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k_1_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                k_1_reg_205 <= add_ln219_reg_590;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_1_reg_205 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    x_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                x_0_reg_194 <= select_ln211_1_reg_575;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_0_reg_194 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln211_reg_524 <= add_ln211_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln219_reg_590 <= add_ln219_fu_354_p2;
                j_reg_600 <= j_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add_ln220_reg_610 <= grp_fu_513_p3;
                as_load_1_reg_605 <= as_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_reg_660 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                cp_1_load_reg_669 <= cp_1_fu_66;
                icmp_ln237_reg_675 <= icmp_ln237_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_2_reg_634 <= i_2_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln211_reg_520 <= icmp_ln211_fu_238_p2;
                icmp_ln211_reg_520_pp0_iter1_reg <= icmp_ln211_reg_520;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln211_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln214_reg_529 <= icmp_ln214_fu_268_p2;
                icmp_ln220_1_reg_565 <= icmp_ln220_1_fu_314_p2;
                icmp_ln220_reg_560 <= icmp_ln220_fu_308_p2;
                mul_ln218_reg_554 <= mul_ln218_fu_302_p2;
                select_ln220_1_reg_540 <= select_ln220_1_fu_282_p3;
                select_ln220_reg_534 <= select_ln220_fu_274_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln228_reg_630 <= icmp_ln228_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_reg_630 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                icmp_ln232_reg_660 <= icmp_ln232_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_reg_630 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                odoarr_load_1_reg_654 <= odoarr_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln211_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln211_1_reg_575 <= select_ln211_1_fu_328_p3;
                select_ln211_reg_570 <= select_ln211_fu_320_p3;
                select_ln220_2_reg_548 <= select_ln220_2_fu_290_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    zext_ln214_reg_580(4 downto 0) <= zext_ln214_fu_341_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    zext_ln228_reg_639(9 downto 0) <= zext_ln228_fu_423_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln214_reg_580(9 downto 5) <= "00000";
    zext_ln228_reg_639(10) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln211_fu_238_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln228_fu_411_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln211_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln211_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln228_fu_411_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln228_fu_411_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln211_fu_244_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_165_p4) + unsigned(ap_const_lv10_1));
    add_ln218_fu_344_p2 <= std_logic_vector(unsigned(mul_ln218_reg_554) + unsigned(zext_ln214_fu_341_p1));
    add_ln219_1_fu_262_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_0_phi_fu_176_p4) + unsigned(ap_const_lv10_19));
    add_ln219_fu_354_p2 <= std_logic_vector(unsigned(select_ln220_reg_534) + unsigned(ap_const_lv10_1));
    add_ln220_1_fu_375_p2 <= std_logic_vector(unsigned(mul_ln218_reg_554) + unsigned(zext_ln220_2_fu_371_p1));
    add_ln237_fu_443_p2 <= std_logic_vector(unsigned(zext_ln228_reg_639) + unsigned(ap_const_lv11_7FF));
    add_ln241_fu_469_p2 <= std_logic_vector(signed(cp_1_load_reg_669) + signed(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln211_fu_238_p2)
    begin
        if ((icmp_ln211_fu_238_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln228_fu_411_p2)
    begin
        if ((icmp_ln228_fu_411_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_187_p4_assign_proc : process(i_0_reg_183, icmp_ln211_reg_520, ap_CS_fsm_pp0_stage0, select_ln220_2_reg_548, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_187_p4 <= select_ln220_2_reg_548;
        else 
            ap_phi_mux_i_0_phi_fu_187_p4 <= i_0_reg_183;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_231_p4_assign_proc : process(i_1_reg_227, icmp_ln228_reg_630, ap_CS_fsm_pp1_stage0, i_2_reg_634, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln228_reg_630 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_1_phi_fu_231_p4 <= i_2_reg_634;
        else 
            ap_phi_mux_i_1_phi_fu_231_p4 <= i_1_reg_227;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_165_p4_assign_proc : process(indvar_flatten_reg_161, icmp_ln211_reg_520, ap_CS_fsm_pp0_stage0, add_ln211_reg_524, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_165_p4 <= add_ln211_reg_524;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_165_p4 <= indvar_flatten_reg_161;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_220_p4_assign_proc : process(j_0_reg_216, icmp_ln211_reg_520, ap_CS_fsm_pp0_stage0, j_reg_600, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_0_phi_fu_220_p4 <= j_reg_600;
        else 
            ap_phi_mux_j_0_phi_fu_220_p4 <= j_0_reg_216;
        end if; 
    end process;


    ap_phi_mux_k_0_phi_fu_176_p4_assign_proc : process(k_0_reg_172, icmp_ln211_reg_520, ap_CS_fsm_pp0_stage0, select_ln211_reg_570, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_k_0_phi_fu_176_p4 <= select_ln211_reg_570;
        else 
            ap_phi_mux_k_0_phi_fu_176_p4 <= k_0_reg_172;
        end if; 
    end process;


    ap_phi_mux_k_1_phi_fu_209_p4_assign_proc : process(k_1_reg_205, icmp_ln211_reg_520, ap_CS_fsm_pp0_stage0, add_ln219_reg_590, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_k_1_phi_fu_209_p4 <= add_ln219_reg_590;
        else 
            ap_phi_mux_k_1_phi_fu_209_p4 <= k_1_reg_205;
        end if; 
    end process;


    ap_phi_mux_x_0_phi_fu_198_p4_assign_proc : process(x_0_reg_194, icmp_ln211_reg_520, ap_CS_fsm_pp0_stage0, select_ln211_1_reg_575, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_x_0_phi_fu_198_p4 <= select_ln211_1_reg_575;
        else 
            ap_phi_mux_x_0_phi_fu_198_p4 <= x_0_reg_194;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    as_address0 <= zext_ln218_2_fu_349_p1(10 - 1 downto 0);
    as_address1 <= zext_ln220_3_fu_380_p1(10 - 1 downto 0);

    as_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            as_ce0 <= ap_const_logic_1;
        else 
            as_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    as_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            as_ce1 <= ap_const_logic_1;
        else 
            as_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bs_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp1_stage1, sext_ln240_fu_461_p1, sext_ln241_fu_474_p1)
    begin
        if ((ap_enable_reg_pp1_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                bs_address0 <= sext_ln241_fu_474_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                bs_address0 <= sext_ln240_fu_461_p1(10 - 1 downto 0);
            else 
                bs_address0 <= "XXXXXXXXXX";
            end if;
        else 
            bs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    bs_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            bs_ce0 <= ap_const_logic_1;
        else 
            bs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bs_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, odoarr_load_1_reg_654, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp1_stage1, select_ln243_fu_479_p3)
    begin
        if ((ap_enable_reg_pp1_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                bs_d0 <= select_ln243_fu_479_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                bs_d0 <= odoarr_load_1_reg_654;
            else 
                bs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            bs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bs_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, icmp_ln232_reg_660, ap_enable_reg_pp1_iter1)
    begin
        if ((((icmp_ln232_reg_660 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((icmp_ln232_reg_660 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            bs_we0 <= ap_const_logic_1;
        else 
            bs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    count_fu_502_p2 <= std_logic_vector(unsigned(count_1_fu_62) + unsigned(ap_const_lv32_1));
    cp_fu_487_p2 <= std_logic_vector(signed(cp_1_load_reg_669) + signed(ap_const_lv32_2));
    grp_fu_513_p0 <= grp_fu_513_p00(5 - 1 downto 0);
    grp_fu_513_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln220_2_reg_548),10));
    grp_fu_513_p1 <= ap_const_lv10_19(6 - 1 downto 0);
    grp_fu_513_p2 <= zext_ln214_reg_580(5 - 1 downto 0);
    i_2_fu_417_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_231_p4) + unsigned(ap_const_lv10_1));
    i_fu_256_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_187_p4) + unsigned(ap_const_lv5_1));
    icmp_ln211_fu_238_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_165_p4 = ap_const_lv10_271) else "0";
    icmp_ln214_fu_268_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_220_p4 = ap_const_lv5_19) else "0";
    icmp_ln220_1_fu_314_p2 <= "1" when (ap_phi_mux_x_0_phi_fu_198_p4 = ap_const_lv32_0) else "0";
    icmp_ln220_fu_308_p2 <= "1" when (ap_phi_mux_x_0_phi_fu_198_p4 = ap_const_lv32_1) else "0";
    icmp_ln228_fu_411_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_231_p4 = ap_const_lv10_271) else "0";
    icmp_ln232_fu_437_p2 <= "1" when (odoarr_q0 = odoarr_q1) else "0";
    icmp_ln237_fu_456_p2 <= "1" when (odoarr_q1 = odoarr_load_1_reg_654) else "0";
    j_fu_385_p2 <= std_logic_vector(unsigned(select_ln220_1_reg_540) + unsigned(ap_const_lv5_1));
    mul_ln218_fu_302_p0 <= mul_ln218_fu_302_p00(5 - 1 downto 0);
    mul_ln218_fu_302_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln220_2_fu_290_p3),10));
    mul_ln218_fu_302_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln218_fu_302_p0) * unsigned(ap_const_lv10_19), 10));

    odoarr_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp0_stage1, zext_ln218_1_fu_393_p1, zext_ln220_1_fu_397_p1, zext_ln232_fu_427_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            odoarr_address0 <= zext_ln232_fu_427_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            odoarr_address0 <= zext_ln220_1_fu_397_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            odoarr_address0 <= zext_ln218_1_fu_393_p1(10 - 1 downto 0);
        else 
            odoarr_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    odoarr_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage0, zext_ln232_1_fu_432_p1, sext_ln237_fu_448_p1, ap_block_pp1_stage1)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                odoarr_address1 <= sext_ln237_fu_448_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                odoarr_address1 <= zext_ln232_1_fu_432_p1(10 - 1 downto 0);
            else 
                odoarr_address1 <= "XXXXXXXXXX";
            end if;
        else 
            odoarr_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    odoarr_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            odoarr_ce0 <= ap_const_logic_1;
        else 
            odoarr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    odoarr_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            odoarr_ce1 <= ap_const_logic_1;
        else 
            odoarr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    odoarr_d0_assign_proc : process(as_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, as_load_1_reg_605, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                odoarr_d0 <= as_load_1_reg_605;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                odoarr_d0 <= as_q0;
            else 
                odoarr_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            odoarr_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    odoarr_we0_assign_proc : process(icmp_ln211_reg_520, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln211_reg_520_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln211_reg_520 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln211_reg_520_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            odoarr_we0 <= ap_const_logic_1;
        else 
            odoarr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln211_1_fu_328_p3 <= 
        x_fu_250_p2 when (icmp_ln214_fu_268_p2(0) = '1') else 
        ap_phi_mux_x_0_phi_fu_198_p4;
    select_ln211_fu_320_p3 <= 
        add_ln219_1_fu_262_p2 when (icmp_ln214_fu_268_p2(0) = '1') else 
        ap_phi_mux_k_0_phi_fu_176_p4;
    select_ln220_1_fu_282_p3 <= 
        ap_const_lv5_0 when (icmp_ln214_fu_268_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_220_p4;
    select_ln220_2_fu_290_p3 <= 
        i_fu_256_p2 when (icmp_ln214_fu_268_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_187_p4;
    select_ln220_3_fu_336_p3 <= 
        icmp_ln220_reg_560 when (icmp_ln214_reg_529(0) = '1') else 
        icmp_ln220_1_reg_565;
    select_ln220_4_fu_364_p3 <= 
        select_ln220_1_reg_540 when (select_ln220_3_fu_336_p3(0) = '1') else 
        sub_ln220_fu_359_p2;
    select_ln220_fu_274_p3 <= 
        add_ln219_1_fu_262_p2 when (icmp_ln214_fu_268_p2(0) = '1') else 
        ap_phi_mux_k_1_phi_fu_209_p4;
    select_ln243_fu_479_p3 <= 
        count_1_fu_62 when (icmp_ln237_reg_675(0) = '1') else 
        ap_const_lv32_1;
        sext_ln237_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln237_fu_443_p2),64));

    sext_ln240_fu_461_p0 <= cp_1_fu_66;
        sext_ln240_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln240_fu_461_p0),64));

        sext_ln241_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln241_fu_469_p2),64));

    sub_ln220_fu_359_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(select_ln220_1_reg_540));
    x_fu_250_p2 <= (ap_phi_mux_x_0_phi_fu_198_p4 xor ap_const_lv32_1);
    zext_ln214_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln220_1_reg_540),10));
    zext_ln218_1_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln220_reg_534),64));
    zext_ln218_2_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln218_fu_344_p2),64));
    zext_ln220_1_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln220_reg_610),64));
    zext_ln220_2_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln220_4_fu_364_p3),10));
    zext_ln220_3_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln220_1_fu_375_p2),64));
    zext_ln228_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_231_p4),11));
    zext_ln232_1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_231_p4),64));
    zext_ln232_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_417_p2),64));
end behav;
