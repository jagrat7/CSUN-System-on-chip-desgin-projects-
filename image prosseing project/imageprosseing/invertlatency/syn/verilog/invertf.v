// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="invertf,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.060000,HLS_SYN_LAT=20201,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=74,HLS_SYN_LUT=183,HLS_VERSION=2019_1}" *)

module invertf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ai_address0,
        ai_ce0,
        ai_q0,
        bi_address0,
        bi_ce0,
        bi_we0,
        bi_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] ai_address0;
output   ai_ce0;
input  [31:0] ai_q0;
output  [13:0] bi_address0;
output   bi_ce0;
output   bi_we0;
output  [31:0] bi_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ai_ce0;
reg bi_ce0;
reg bi_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] add_ln324_fu_106_p2;
reg   [13:0] add_ln324_reg_158;
wire    ap_CS_fsm_state2;
wire   [6:0] i_fu_118_p2;
reg   [6:0] i_reg_166;
wire   [6:0] j_fu_130_p2;
reg   [6:0] j_reg_174;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln328_1_fu_146_p1;
reg   [63:0] zext_ln328_1_reg_179;
wire   [0:0] icmp_ln326_fu_124_p2;
reg   [6:0] i_0_reg_72;
reg   [13:0] phi_mul_reg_83;
reg   [6:0] j_0_reg_95;
wire   [0:0] icmp_ln324_fu_112_p2;
wire    ap_CS_fsm_state4;
wire   [13:0] zext_ln328_fu_136_p1;
wire   [13:0] add_ln328_fu_140_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln326_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_72 <= i_reg_166;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_72 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_95 <= j_reg_174;
    end else if (((icmp_ln324_fu_112_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_95 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln326_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_83 <= add_ln324_reg_158;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_83 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln324_reg_158 <= add_ln324_fu_106_p2;
        i_reg_166 <= i_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_174 <= j_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln326_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln328_1_reg_179[13 : 0] <= zext_ln328_1_fu_146_p1[13 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ai_ce0 = 1'b1;
    end else begin
        ai_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln324_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln324_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bi_ce0 = 1'b1;
    end else begin
        bi_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bi_we0 = 1'b1;
    end else begin
        bi_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln324_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln326_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln324_fu_106_p2 = (phi_mul_reg_83 + 14'd100);

assign add_ln328_fu_140_p2 = (phi_mul_reg_83 + zext_ln328_fu_136_p1);

assign ai_address0 = zext_ln328_1_fu_146_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign bi_address0 = zext_ln328_1_reg_179;

assign bi_d0 = (32'd255 - ai_q0);

assign i_fu_118_p2 = (i_0_reg_72 + 7'd1);

assign icmp_ln324_fu_112_p2 = ((i_0_reg_72 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln326_fu_124_p2 = ((j_0_reg_95 == 7'd100) ? 1'b1 : 1'b0);

assign j_fu_130_p2 = (j_0_reg_95 + 7'd1);

assign zext_ln328_1_fu_146_p1 = add_ln328_fu_140_p2;

assign zext_ln328_fu_136_p1 = j_0_reg_95;

always @ (posedge ap_clk) begin
    zext_ln328_1_reg_179[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //invertf
