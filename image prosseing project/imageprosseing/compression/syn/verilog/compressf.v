// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="compressf,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.239750,HLS_SYN_LAT=4427,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=353,HLS_SYN_LUT=639,HLS_VERSION=2019_1}" *)

module compressf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        as_address0,
        as_ce0,
        as_q0,
        bs_address0,
        bs_ce0,
        bs_we0,
        bs_d0,
        bs_address1,
        bs_ce1,
        bs_we1,
        bs_d1
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] as_address0;
output   as_ce0;
input  [31:0] as_q0;
output  [9:0] bs_address0;
output   bs_ce0;
output   bs_we0;
output  [31:0] bs_d0;
output  [9:0] bs_address1;
output   bs_ce1;
output   bs_we1;
output  [31:0] bs_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] as_address0;
reg as_ce0;
reg bs_ce0;
reg bs_we0;
reg bs_ce1;
reg bs_we1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] add_ln220_2_fu_251_p2;
reg   [9:0] add_ln220_2_reg_481;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln220_3_fu_257_p2;
reg   [9:0] add_ln220_3_reg_486;
wire   [4:0] i_2_fu_269_p2;
reg   [4:0] i_2_reg_494;
wire   [9:0] k_fu_275_p2;
reg   [9:0] k_reg_499;
wire   [0:0] icmp_ln211_fu_263_p2;
wire   [0:0] icmp_ln220_fu_281_p2;
reg   [0:0] icmp_ln220_reg_504;
wire   [4:0] j_fu_307_p2;
reg   [4:0] j_reg_527;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln214_fu_301_p2;
wire   [9:0] add_ln220_1_fu_341_p2;
reg   [9:0] add_ln220_1_reg_537;
wire   [9:0] add_ln220_fu_347_p2;
reg   [9:0] add_ln220_reg_542;
wire   [31:0] x_fu_353_p2;
wire   [9:0] add_ln219_fu_364_p2;
reg   [9:0] add_ln219_reg_552;
wire    ap_CS_fsm_state4;
wire   [10:0] zext_ln228_fu_378_p1;
reg   [10:0] zext_ln228_reg_562;
wire    ap_CS_fsm_state6;
wire   [9:0] i_fu_388_p2;
reg   [9:0] i_reg_570;
wire   [0:0] icmp_ln228_fu_382_p2;
wire   [31:0] odoarr_q1;
reg   [31:0] odoarr_load_1_reg_585;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln232_fu_404_p2;
reg   [0:0] icmp_ln232_reg_591;
reg   [31:0] count_1_load_reg_595;
wire   [31:0] select_ln243_fu_439_p3;
reg   [31:0] select_ln243_reg_605;
wire    ap_CS_fsm_state8;
reg   [9:0] odoarr_address0;
reg    odoarr_ce0;
reg    odoarr_we0;
wire   [31:0] odoarr_q0;
reg   [9:0] odoarr_address1;
reg    odoarr_ce1;
reg   [9:0] k_0_reg_159;
reg   [4:0] i_0_reg_171;
reg   [31:0] x_0_reg_182;
reg   [9:0] phi_mul_reg_194;
reg   [9:0] phi_mul1_reg_206;
reg   [9:0] k_1_reg_218;
wire    ap_CS_fsm_state5;
reg   [4:0] j_0_reg_229;
reg   [9:0] i_1_reg_240;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln218_fu_319_p1;
wire   [63:0] zext_ln218_1_fu_359_p1;
wire   [63:0] zext_ln220_2_fu_370_p1;
wire   [63:0] zext_ln220_1_fu_374_p1;
wire   [63:0] zext_ln232_fu_394_p1;
wire   [63:0] zext_ln232_1_fu_399_p1;
wire  signed [63:0] sext_ln237_fu_418_p1;
wire  signed [63:0] sext_ln240_fu_454_p1;
wire  signed [63:0] sext_ln241_fu_465_p1;
reg   [31:0] count_1_fu_60;
wire   [31:0] count_fu_423_p2;
reg   [31:0] cp_1_fu_64;
wire   [31:0] cp_fu_470_p2;
wire   [9:0] zext_ln214_fu_297_p1;
wire   [9:0] add_ln218_fu_313_p2;
wire   [4:0] sub_ln220_fu_324_p2;
wire   [4:0] select_ln220_fu_330_p3;
wire   [9:0] zext_ln220_fu_337_p1;
wire   [10:0] add_ln237_fu_413_p2;
wire   [0:0] icmp_ln237_fu_434_p2;
wire  signed [31:0] sext_ln240_fu_454_p0;
wire  signed [31:0] add_ln241_fu_459_p0;
wire   [31:0] add_ln241_fu_459_p2;
wire  signed [31:0] cp_fu_470_p0;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

compressf_odoarr #(
    .DataWidth( 32 ),
    .AddressRange( 625 ),
    .AddressWidth( 10 ))
odoarr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(odoarr_address0),
    .ce0(odoarr_ce0),
    .we0(odoarr_we0),
    .d0(as_q0),
    .q0(odoarr_q0),
    .address1(odoarr_address1),
    .ce1(odoarr_ce1),
    .q1(odoarr_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        count_1_fu_60 <= select_ln243_fu_439_p3;
    end else if (((icmp_ln232_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        count_1_fu_60 <= count_fu_423_p2;
    end else if (((icmp_ln211_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        count_1_fu_60 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln232_reg_591 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        cp_1_fu_64 <= cp_fu_470_p2;
    end else if (((icmp_ln211_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        cp_1_fu_64 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln214_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_171 <= i_2_reg_494;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_171 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_240 <= i_reg_570;
    end else if (((icmp_ln211_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_240 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_229 <= j_reg_527;
    end else if (((icmp_ln211_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_229 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln214_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_159 <= k_reg_499;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_0_reg_159 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_1_reg_218 <= add_ln219_reg_552;
    end else if (((icmp_ln211_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_1_reg_218 <= k_0_reg_159;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln214_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul1_reg_206 <= add_ln220_2_reg_481;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_206 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln214_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_194 <= add_ln220_3_reg_486;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_194 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln214_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_0_reg_182 <= x_fu_353_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_0_reg_182 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln219_reg_552 <= add_ln219_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln214_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln220_1_reg_537 <= add_ln220_1_fu_341_p2;
        add_ln220_reg_542 <= add_ln220_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln220_2_reg_481 <= add_ln220_2_fu_251_p2;
        add_ln220_3_reg_486 <= add_ln220_3_fu_257_p2;
        i_2_reg_494 <= i_2_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        count_1_load_reg_595 <= count_1_fu_60;
        icmp_ln232_reg_591 <= icmp_ln232_fu_404_p2;
        odoarr_load_1_reg_585 <= odoarr_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_570 <= i_fu_388_p2;
        zext_ln228_reg_562[9 : 0] <= zext_ln228_fu_378_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln211_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln220_reg_504 <= icmp_ln220_fu_281_p2;
        k_reg_499 <= k_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_527 <= j_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        select_ln243_reg_605 <= select_ln243_fu_439_p3;
    end
end

always @ (*) begin
    if (((icmp_ln228_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln228_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        as_address0 = zext_ln220_2_fu_370_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        as_address0 = zext_ln218_fu_319_p1;
    end else begin
        as_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        as_ce0 = 1'b1;
    end else begin
        as_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bs_ce0 = 1'b1;
    end else begin
        bs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bs_ce1 = 1'b1;
    end else begin
        bs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln232_reg_591 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        bs_we0 = 1'b1;
    end else begin
        bs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln232_reg_591 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        bs_we1 = 1'b1;
    end else begin
        bs_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        odoarr_address0 = zext_ln232_fu_394_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        odoarr_address0 = zext_ln220_1_fu_374_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        odoarr_address0 = zext_ln218_1_fu_359_p1;
    end else begin
        odoarr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        odoarr_address1 = sext_ln237_fu_418_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        odoarr_address1 = zext_ln232_1_fu_399_p1;
    end else begin
        odoarr_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        odoarr_ce0 = 1'b1;
    end else begin
        odoarr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        odoarr_ce1 = 1'b1;
    end else begin
        odoarr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        odoarr_we0 = 1'b1;
    end else begin
        odoarr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln211_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln214_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln228_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln232_fu_404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln218_fu_313_p2 = (phi_mul_reg_194 + zext_ln214_fu_297_p1);

assign add_ln219_fu_364_p2 = (k_1_reg_218 + 10'd1);

assign add_ln220_1_fu_341_p2 = (phi_mul_reg_194 + zext_ln220_fu_337_p1);

assign add_ln220_2_fu_251_p2 = (phi_mul1_reg_206 + 10'd25);

assign add_ln220_3_fu_257_p2 = (phi_mul_reg_194 + 10'd25);

assign add_ln220_fu_347_p2 = (zext_ln214_fu_297_p1 + phi_mul1_reg_206);

assign add_ln237_fu_413_p2 = ($signed(zext_ln228_reg_562) + $signed(11'd2047));

assign add_ln241_fu_459_p0 = cp_1_fu_64;

assign add_ln241_fu_459_p2 = ($signed(add_ln241_fu_459_p0) + $signed(32'd1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bs_address0 = sext_ln240_fu_454_p1;

assign bs_address1 = sext_ln241_fu_465_p1;

assign bs_d0 = odoarr_load_1_reg_585;

assign bs_d1 = select_ln243_reg_605;

assign count_fu_423_p2 = (count_1_fu_60 + 32'd1);

assign cp_fu_470_p0 = cp_1_fu_64;

assign cp_fu_470_p2 = ($signed(cp_fu_470_p0) + $signed(32'd2));

assign i_2_fu_269_p2 = (i_0_reg_171 + 5'd1);

assign i_fu_388_p2 = (i_1_reg_240 + 10'd1);

assign icmp_ln211_fu_263_p2 = ((i_0_reg_171 == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln214_fu_301_p2 = ((j_0_reg_229 == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln220_fu_281_p2 = ((x_0_reg_182 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln228_fu_382_p2 = ((i_1_reg_240 == 10'd625) ? 1'b1 : 1'b0);

assign icmp_ln232_fu_404_p2 = ((odoarr_q0 == odoarr_q1) ? 1'b1 : 1'b0);

assign icmp_ln237_fu_434_p2 = ((odoarr_q1 == odoarr_load_1_reg_585) ? 1'b1 : 1'b0);

assign j_fu_307_p2 = (j_0_reg_229 + 5'd1);

assign k_fu_275_p2 = (k_0_reg_159 + 10'd25);

assign select_ln220_fu_330_p3 = ((icmp_ln220_reg_504[0:0] === 1'b1) ? j_0_reg_229 : sub_ln220_fu_324_p2);

assign select_ln243_fu_439_p3 = ((icmp_ln237_fu_434_p2[0:0] === 1'b1) ? count_1_load_reg_595 : 32'd1);

assign sext_ln237_fu_418_p1 = $signed(add_ln237_fu_413_p2);

assign sext_ln240_fu_454_p0 = cp_1_fu_64;

assign sext_ln240_fu_454_p1 = sext_ln240_fu_454_p0;

assign sext_ln241_fu_465_p1 = $signed(add_ln241_fu_459_p2);

assign sub_ln220_fu_324_p2 = ($signed(5'd24) - $signed(j_0_reg_229));

assign x_fu_353_p2 = (x_0_reg_182 ^ 32'd1);

assign zext_ln214_fu_297_p1 = j_0_reg_229;

assign zext_ln218_1_fu_359_p1 = k_1_reg_218;

assign zext_ln218_fu_319_p1 = add_ln218_fu_313_p2;

assign zext_ln220_1_fu_374_p1 = add_ln220_reg_542;

assign zext_ln220_2_fu_370_p1 = add_ln220_1_reg_537;

assign zext_ln220_fu_337_p1 = select_ln220_fu_330_p3;

assign zext_ln228_fu_378_p1 = i_1_reg_240;

assign zext_ln232_1_fu_399_p1 = i_1_reg_240;

assign zext_ln232_fu_394_p1 = i_fu_388_p2;

always @ (posedge ap_clk) begin
    zext_ln228_reg_562[10] <= 1'b0;
end

endmodule //compressf
