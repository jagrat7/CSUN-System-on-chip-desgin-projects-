// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "scalef.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic scalef::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic scalef::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<18> scalef::ap_ST_fsm_state1 = "1";
const sc_lv<18> scalef::ap_ST_fsm_state2 = "10";
const sc_lv<18> scalef::ap_ST_fsm_state3 = "100";
const sc_lv<18> scalef::ap_ST_fsm_state4 = "1000";
const sc_lv<18> scalef::ap_ST_fsm_state5 = "10000";
const sc_lv<18> scalef::ap_ST_fsm_state6 = "100000";
const sc_lv<18> scalef::ap_ST_fsm_state7 = "1000000";
const sc_lv<18> scalef::ap_ST_fsm_state8 = "10000000";
const sc_lv<18> scalef::ap_ST_fsm_state9 = "100000000";
const sc_lv<18> scalef::ap_ST_fsm_state10 = "1000000000";
const sc_lv<18> scalef::ap_ST_fsm_state11 = "10000000000";
const sc_lv<18> scalef::ap_ST_fsm_state12 = "100000000000";
const sc_lv<18> scalef::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<18> scalef::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<18> scalef::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<18> scalef::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<18> scalef::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<18> scalef::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<32> scalef::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> scalef::ap_const_lv32_1 = "1";
const sc_lv<32> scalef::ap_const_lv32_2 = "10";
const sc_lv<1> scalef::ap_const_lv1_0 = "0";
const sc_lv<32> scalef::ap_const_lv32_3 = "11";
const sc_lv<32> scalef::ap_const_lv32_9 = "1001";
const sc_lv<32> scalef::ap_const_lv32_F = "1111";
const sc_lv<32> scalef::ap_const_lv32_10 = "10000";
const sc_lv<7> scalef::ap_const_lv7_0 = "0000000";
const sc_lv<1> scalef::ap_const_lv1_1 = "1";
const sc_lv<14> scalef::ap_const_lv14_0 = "00000000000000";
const sc_lv<32> scalef::ap_const_lv32_11 = "10001";
const sc_lv<64> scalef::ap_const_lv64_3FE0000000000000 = "11111111100000000000000000000000000000000000000000000000000000";
const sc_lv<32> scalef::ap_const_lv32_A = "1010";
const sc_lv<32> scalef::ap_const_lv32_4 = "100";
const sc_lv<14> scalef::ap_const_lv14_64 = "1100100";
const sc_lv<7> scalef::ap_const_lv7_64 = "1100100";
const sc_lv<7> scalef::ap_const_lv7_1 = "1";
const sc_lv<32> scalef::ap_const_lv32_3F = "111111";
const sc_lv<32> scalef::ap_const_lv32_34 = "110100";
const sc_lv<32> scalef::ap_const_lv32_3E = "111110";
const sc_lv<12> scalef::ap_const_lv12_C01 = "110000000001";
const sc_lv<32> scalef::ap_const_lv32_B = "1011";
const sc_lv<11> scalef::ap_const_lv11_3FF = "1111111111";
const sc_lv<32> scalef::ap_const_lv32_35 = "110101";
const sc_lv<32> scalef::ap_const_lv32_54 = "1010100";
const bool scalef::ap_const_boolean_1 = true;

scalef::scalef(sc_module_name name) : sc_module(name), mVcdFile(0) {
    scalef_dmul_64ns_bkb_U1 = new scalef_dmul_64ns_bkb<1,6,64,64,64>("scalef_dmul_64ns_bkb_U1");
    scalef_dmul_64ns_bkb_U1->clk(ap_clk);
    scalef_dmul_64ns_bkb_U1->reset(ap_rst);
    scalef_dmul_64ns_bkb_U1->din0(tmp_reg_352);
    scalef_dmul_64ns_bkb_U1->din1(ap_var_for_const0);
    scalef_dmul_64ns_bkb_U1->ce(ap_var_for_const1);
    scalef_dmul_64ns_bkb_U1->dout(grp_fu_122_p2);
    scalef_sitodp_32ncud_U2 = new scalef_sitodp_32ncud<1,6,32,64>("scalef_sitodp_32ncud_U2");
    scalef_sitodp_32ncud_U2->clk(ap_clk);
    scalef_sitodp_32ncud_U2->reset(ap_rst);
    scalef_sitodp_32ncud_U2->din0(as_load_reg_347);
    scalef_sitodp_32ncud_U2->ce(ap_var_for_const1);
    scalef_sitodp_32ncud_U2->dout(grp_fu_127_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln20_fu_130_p2);
    sensitive << ( phi_mul_reg_99 );

    SC_METHOD(thread_add_ln24_fu_164_p2);
    sensitive << ( phi_mul_reg_99 );
    sensitive << ( zext_ln24_fu_160_p1 );

    SC_METHOD(thread_add_ln502_fu_218_p2);
    sensitive << ( zext_ln502_fu_214_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_136_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_136_p2 );

    SC_METHOD(thread_as_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln24_1_fu_170_p1 );

    SC_METHOD(thread_as_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_bs_address0);
    sensitive << ( zext_ln24_1_reg_337 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_bs_ce0);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_bs_d0);
    sensitive << ( p_Result_s_reg_362 );
    sensitive << ( p_Val2_5_reg_367 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( result_V_1_fu_304_p2 );

    SC_METHOD(thread_bs_we0);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_i_fu_142_p2);
    sensitive << ( i_0_reg_88 );

    SC_METHOD(thread_icmp_ln20_fu_136_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_88 );

    SC_METHOD(thread_icmp_ln22_fu_148_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_111 );

    SC_METHOD(thread_isNeg_fu_224_p3);
    sensitive << ( add_ln502_fu_218_p2 );

    SC_METHOD(thread_j_fu_154_p2);
    sensitive << ( j_0_reg_111 );

    SC_METHOD(thread_mantissa_V_fu_200_p4);
    sensitive << ( tmp_V_1_fu_196_p1 );

    SC_METHOD(thread_p_Val2_5_fu_296_p3);
    sensitive << ( isNeg_fu_224_p3 );
    sensitive << ( zext_ln662_fu_282_p1 );
    sensitive << ( tmp_2_fu_286_p4 );

    SC_METHOD(thread_p_Val2_s_fu_175_p1);
    sensitive << ( x_assign_reg_357 );

    SC_METHOD(thread_r_V_1_fu_268_p2);
    sensitive << ( zext_ln682_fu_210_p1 );
    sensitive << ( zext_ln1287_fu_254_p1 );

    SC_METHOD(thread_r_V_fu_262_p2);
    sensitive << ( mantissa_V_fu_200_p4 );
    sensitive << ( zext_ln1285_fu_258_p1 );

    SC_METHOD(thread_result_V_1_fu_304_p2);
    sensitive << ( p_Val2_5_reg_367 );

    SC_METHOD(thread_sext_ln1311_1_fu_250_p1);
    sensitive << ( ush_fu_242_p3 );

    SC_METHOD(thread_sext_ln1311_fu_238_p1);
    sensitive << ( sub_ln1311_fu_232_p2 );

    SC_METHOD(thread_sub_ln1311_fu_232_p2);
    sensitive << ( tmp_V_fu_186_p4 );

    SC_METHOD(thread_tmp_2_fu_286_p4);
    sensitive << ( r_V_1_fu_268_p2 );

    SC_METHOD(thread_tmp_4_fu_274_p3);
    sensitive << ( r_V_fu_262_p2 );

    SC_METHOD(thread_tmp_V_1_fu_196_p1);
    sensitive << ( p_Val2_s_fu_175_p1 );

    SC_METHOD(thread_tmp_V_fu_186_p4);
    sensitive << ( p_Val2_s_fu_175_p1 );

    SC_METHOD(thread_ush_fu_242_p3);
    sensitive << ( add_ln502_fu_218_p2 );
    sensitive << ( isNeg_fu_224_p3 );
    sensitive << ( sext_ln1311_fu_238_p1 );

    SC_METHOD(thread_zext_ln1285_fu_258_p1);
    sensitive << ( sext_ln1311_1_fu_250_p1 );

    SC_METHOD(thread_zext_ln1287_fu_254_p1);
    sensitive << ( sext_ln1311_1_fu_250_p1 );

    SC_METHOD(thread_zext_ln24_1_fu_170_p1);
    sensitive << ( add_ln24_fu_164_p2 );

    SC_METHOD(thread_zext_ln24_fu_160_p1);
    sensitive << ( j_0_reg_111 );

    SC_METHOD(thread_zext_ln502_fu_214_p1);
    sensitive << ( tmp_V_fu_186_p4 );

    SC_METHOD(thread_zext_ln662_fu_282_p1);
    sensitive << ( tmp_4_fu_274_p3 );

    SC_METHOD(thread_zext_ln682_fu_210_p1);
    sensitive << ( mantissa_V_fu_200_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln22_fu_148_p2 );
    sensitive << ( icmp_ln20_fu_136_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "scalef_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, as_address0, "(port)as_address0");
    sc_trace(mVcdFile, as_ce0, "(port)as_ce0");
    sc_trace(mVcdFile, as_q0, "(port)as_q0");
    sc_trace(mVcdFile, bs_address0, "(port)bs_address0");
    sc_trace(mVcdFile, bs_ce0, "(port)bs_ce0");
    sc_trace(mVcdFile, bs_we0, "(port)bs_we0");
    sc_trace(mVcdFile, bs_d0, "(port)bs_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, add_ln20_fu_130_p2, "add_ln20_fu_130_p2");
    sc_trace(mVcdFile, add_ln20_reg_316, "add_ln20_reg_316");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_142_p2, "i_fu_142_p2");
    sc_trace(mVcdFile, i_reg_324, "i_reg_324");
    sc_trace(mVcdFile, j_fu_154_p2, "j_fu_154_p2");
    sc_trace(mVcdFile, j_reg_332, "j_reg_332");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln24_1_fu_170_p1, "zext_ln24_1_fu_170_p1");
    sc_trace(mVcdFile, zext_ln24_1_reg_337, "zext_ln24_1_reg_337");
    sc_trace(mVcdFile, icmp_ln22_fu_148_p2, "icmp_ln22_fu_148_p2");
    sc_trace(mVcdFile, as_load_reg_347, "as_load_reg_347");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_127_p1, "grp_fu_127_p1");
    sc_trace(mVcdFile, tmp_reg_352, "tmp_reg_352");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_fu_122_p2, "grp_fu_122_p2");
    sc_trace(mVcdFile, x_assign_reg_357, "x_assign_reg_357");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, p_Result_s_reg_362, "p_Result_s_reg_362");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, p_Val2_5_fu_296_p3, "p_Val2_5_fu_296_p3");
    sc_trace(mVcdFile, p_Val2_5_reg_367, "p_Val2_5_reg_367");
    sc_trace(mVcdFile, i_0_reg_88, "i_0_reg_88");
    sc_trace(mVcdFile, phi_mul_reg_99, "phi_mul_reg_99");
    sc_trace(mVcdFile, j_0_reg_111, "j_0_reg_111");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, icmp_ln20_fu_136_p2, "icmp_ln20_fu_136_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln24_fu_160_p1, "zext_ln24_fu_160_p1");
    sc_trace(mVcdFile, add_ln24_fu_164_p2, "add_ln24_fu_164_p2");
    sc_trace(mVcdFile, p_Val2_s_fu_175_p1, "p_Val2_s_fu_175_p1");
    sc_trace(mVcdFile, tmp_V_1_fu_196_p1, "tmp_V_1_fu_196_p1");
    sc_trace(mVcdFile, mantissa_V_fu_200_p4, "mantissa_V_fu_200_p4");
    sc_trace(mVcdFile, tmp_V_fu_186_p4, "tmp_V_fu_186_p4");
    sc_trace(mVcdFile, zext_ln502_fu_214_p1, "zext_ln502_fu_214_p1");
    sc_trace(mVcdFile, add_ln502_fu_218_p2, "add_ln502_fu_218_p2");
    sc_trace(mVcdFile, sub_ln1311_fu_232_p2, "sub_ln1311_fu_232_p2");
    sc_trace(mVcdFile, isNeg_fu_224_p3, "isNeg_fu_224_p3");
    sc_trace(mVcdFile, sext_ln1311_fu_238_p1, "sext_ln1311_fu_238_p1");
    sc_trace(mVcdFile, ush_fu_242_p3, "ush_fu_242_p3");
    sc_trace(mVcdFile, sext_ln1311_1_fu_250_p1, "sext_ln1311_1_fu_250_p1");
    sc_trace(mVcdFile, zext_ln1285_fu_258_p1, "zext_ln1285_fu_258_p1");
    sc_trace(mVcdFile, zext_ln682_fu_210_p1, "zext_ln682_fu_210_p1");
    sc_trace(mVcdFile, zext_ln1287_fu_254_p1, "zext_ln1287_fu_254_p1");
    sc_trace(mVcdFile, r_V_fu_262_p2, "r_V_fu_262_p2");
    sc_trace(mVcdFile, tmp_4_fu_274_p3, "tmp_4_fu_274_p3");
    sc_trace(mVcdFile, r_V_1_fu_268_p2, "r_V_1_fu_268_p2");
    sc_trace(mVcdFile, zext_ln662_fu_282_p1, "zext_ln662_fu_282_p1");
    sc_trace(mVcdFile, tmp_2_fu_286_p4, "tmp_2_fu_286_p4");
    sc_trace(mVcdFile, result_V_1_fu_304_p2, "result_V_1_fu_304_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("scalef.hdltvin.dat");
    mHdltvoutHandle.open("scalef.hdltvout.dat");
}

scalef::~scalef() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete scalef_dmul_64ns_bkb_U1;
    delete scalef_sitodp_32ncud_U2;
}

void scalef::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void scalef::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv64_3FE0000000000000;
}

void scalef::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_148_p2.read(), ap_const_lv1_1))) {
        i_0_reg_88 = i_reg_324.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_88 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_136_p2.read()))) {
        j_0_reg_111 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        j_0_reg_111 = j_reg_332.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_148_p2.read(), ap_const_lv1_1))) {
        phi_mul_reg_99 = add_ln20_reg_316.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul_reg_99 = ap_const_lv14_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln20_reg_316 = add_ln20_fu_130_p2.read();
        i_reg_324 = i_fu_142_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        as_load_reg_347 = as_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_332 = j_fu_154_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        p_Result_s_reg_362 = p_Val2_s_fu_175_p1.read().range(63, 63);
        p_Val2_5_reg_367 = p_Val2_5_fu_296_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_reg_352 = grp_fu_127_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        x_assign_reg_357 = grp_fu_122_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_148_p2.read(), ap_const_lv1_0))) {
        zext_ln24_1_reg_337 = zext_ln24_1_fu_170_p1.read();
    }
}

void scalef::thread_add_ln20_fu_130_p2() {
    add_ln20_fu_130_p2 = (!phi_mul_reg_99.read().is_01() || !ap_const_lv14_64.is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul_reg_99.read()) + sc_biguint<14>(ap_const_lv14_64));
}

void scalef::thread_add_ln24_fu_164_p2() {
    add_ln24_fu_164_p2 = (!phi_mul_reg_99.read().is_01() || !zext_ln24_fu_160_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul_reg_99.read()) + sc_biguint<14>(zext_ln24_fu_160_p1.read()));
}

void scalef::thread_add_ln502_fu_218_p2() {
    add_ln502_fu_218_p2 = (!ap_const_lv12_C01.is_01() || !zext_ln502_fu_214_p1.read().is_01())? sc_lv<12>(): (sc_bigint<12>(ap_const_lv12_C01) + sc_biguint<12>(zext_ln502_fu_214_p1.read()));
}

void scalef::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void scalef::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void scalef::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void scalef::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void scalef::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void scalef::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void scalef::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void scalef::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void scalef::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void scalef::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void scalef::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln20_fu_136_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void scalef::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void scalef::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln20_fu_136_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void scalef::thread_as_address0() {
    as_address0 =  (sc_lv<14>) (zext_ln24_1_fu_170_p1.read());
}

void scalef::thread_as_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        as_ce0 = ap_const_logic_1;
    } else {
        as_ce0 = ap_const_logic_0;
    }
}

void scalef::thread_bs_address0() {
    bs_address0 =  (sc_lv<14>) (zext_ln24_1_reg_337.read());
}

void scalef::thread_bs_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        bs_ce0 = ap_const_logic_1;
    } else {
        bs_ce0 = ap_const_logic_0;
    }
}

void scalef::thread_bs_d0() {
    bs_d0 = (!p_Result_s_reg_362.read()[0].is_01())? sc_lv<32>(): ((p_Result_s_reg_362.read()[0].to_bool())? result_V_1_fu_304_p2.read(): p_Val2_5_reg_367.read());
}

void scalef::thread_bs_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        bs_we0 = ap_const_logic_1;
    } else {
        bs_we0 = ap_const_logic_0;
    }
}

void scalef::thread_i_fu_142_p2() {
    i_fu_142_p2 = (!i_0_reg_88.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_0_reg_88.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void scalef::thread_icmp_ln20_fu_136_p2() {
    icmp_ln20_fu_136_p2 = (!i_0_reg_88.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_88.read() == ap_const_lv7_64);
}

void scalef::thread_icmp_ln22_fu_148_p2() {
    icmp_ln22_fu_148_p2 = (!j_0_reg_111.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_111.read() == ap_const_lv7_64);
}

void scalef::thread_isNeg_fu_224_p3() {
    isNeg_fu_224_p3 = add_ln502_fu_218_p2.read().range(11, 11);
}

void scalef::thread_j_fu_154_p2() {
    j_fu_154_p2 = (!j_0_reg_111.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(j_0_reg_111.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void scalef::thread_mantissa_V_fu_200_p4() {
    mantissa_V_fu_200_p4 = esl_concat<53,1>(esl_concat<1,52>(ap_const_lv1_1, tmp_V_1_fu_196_p1.read()), ap_const_lv1_0);
}

void scalef::thread_p_Val2_5_fu_296_p3() {
    p_Val2_5_fu_296_p3 = (!isNeg_fu_224_p3.read()[0].is_01())? sc_lv<32>(): ((isNeg_fu_224_p3.read()[0].to_bool())? zext_ln662_fu_282_p1.read(): tmp_2_fu_286_p4.read());
}

void scalef::thread_p_Val2_s_fu_175_p1() {
    p_Val2_s_fu_175_p1 = x_assign_reg_357.read();
}

void scalef::thread_r_V_1_fu_268_p2() {
    r_V_1_fu_268_p2 = (!zext_ln1287_fu_254_p1.read().is_01())? sc_lv<137>(): zext_ln682_fu_210_p1.read() << (unsigned short)zext_ln1287_fu_254_p1.read().to_uint();
}

void scalef::thread_r_V_fu_262_p2() {
    r_V_fu_262_p2 = (!zext_ln1285_fu_258_p1.read().is_01())? sc_lv<54>(): mantissa_V_fu_200_p4.read() >> (unsigned short)zext_ln1285_fu_258_p1.read().to_uint();
}

void scalef::thread_result_V_1_fu_304_p2() {
    result_V_1_fu_304_p2 = (!ap_const_lv32_0.is_01() || !p_Val2_5_reg_367.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(p_Val2_5_reg_367.read()));
}

void scalef::thread_sext_ln1311_1_fu_250_p1() {
    sext_ln1311_1_fu_250_p1 = esl_sext<32,12>(ush_fu_242_p3.read());
}

void scalef::thread_sext_ln1311_fu_238_p1() {
    sext_ln1311_fu_238_p1 = esl_sext<12,11>(sub_ln1311_fu_232_p2.read());
}

void scalef::thread_sub_ln1311_fu_232_p2() {
    sub_ln1311_fu_232_p2 = (!ap_const_lv11_3FF.is_01() || !tmp_V_fu_186_p4.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3FF) - sc_biguint<11>(tmp_V_fu_186_p4.read()));
}

void scalef::thread_tmp_2_fu_286_p4() {
    tmp_2_fu_286_p4 = r_V_1_fu_268_p2.read().range(84, 53);
}

void scalef::thread_tmp_4_fu_274_p3() {
    tmp_4_fu_274_p3 = r_V_fu_262_p2.read().range(53, 53);
}

void scalef::thread_tmp_V_1_fu_196_p1() {
    tmp_V_1_fu_196_p1 = p_Val2_s_fu_175_p1.read().range(52-1, 0);
}

void scalef::thread_tmp_V_fu_186_p4() {
    tmp_V_fu_186_p4 = p_Val2_s_fu_175_p1.read().range(62, 52);
}

void scalef::thread_ush_fu_242_p3() {
    ush_fu_242_p3 = (!isNeg_fu_224_p3.read()[0].is_01())? sc_lv<12>(): ((isNeg_fu_224_p3.read()[0].to_bool())? sext_ln1311_fu_238_p1.read(): add_ln502_fu_218_p2.read());
}

void scalef::thread_zext_ln1285_fu_258_p1() {
    zext_ln1285_fu_258_p1 = esl_zext<54,32>(sext_ln1311_1_fu_250_p1.read());
}

void scalef::thread_zext_ln1287_fu_254_p1() {
    zext_ln1287_fu_254_p1 = esl_zext<137,32>(sext_ln1311_1_fu_250_p1.read());
}

void scalef::thread_zext_ln24_1_fu_170_p1() {
    zext_ln24_1_fu_170_p1 = esl_zext<64,14>(add_ln24_fu_164_p2.read());
}

void scalef::thread_zext_ln24_fu_160_p1() {
    zext_ln24_fu_160_p1 = esl_zext<14,7>(j_0_reg_111.read());
}

void scalef::thread_zext_ln502_fu_214_p1() {
    zext_ln502_fu_214_p1 = esl_zext<12,11>(tmp_V_fu_186_p4.read());
}

void scalef::thread_zext_ln662_fu_282_p1() {
    zext_ln662_fu_282_p1 = esl_zext<32,1>(tmp_4_fu_274_p3.read());
}

void scalef::thread_zext_ln682_fu_210_p1() {
    zext_ln682_fu_210_p1 = esl_zext<137,54>(mantissa_V_fu_200_p4.read());
}

void scalef::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln20_fu_136_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_148_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXX";
            break;
    }
}

void scalef::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"as_address0\" :  \"" << as_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"as_ce0\" :  \"" << as_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"as_q0\" :  \"" << as_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bs_address0\" :  \"" << bs_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bs_ce0\" :  \"" << bs_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bs_we0\" :  \"" << bs_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bs_d0\" :  \"" << bs_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

