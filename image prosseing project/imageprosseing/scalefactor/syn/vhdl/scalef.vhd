-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scalef is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    as_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    as_ce0 : OUT STD_LOGIC;
    as_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    bs_ce0 : OUT STD_LOGIC;
    bs_we0 : OUT STD_LOGIC;
    bs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of scalef is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "scalef,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.789000,HLS_SYN_LAT=160201,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=11,HLS_SYN_FF=1010,HLS_SYN_LUT=2209,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln20_fu_130_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_reg_316 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_142_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_324 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_fu_154_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_332 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln24_1_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_reg_337 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln22_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal as_load_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_352 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_122_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_357 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_Result_s_reg_362 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal p_Val2_5_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_88 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_99 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_reg_111 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln20_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln24_fu_160_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_fu_164_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_s_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_1_fu_196_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_200_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_186_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln502_fu_214_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln502_fu_218_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_232_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_224_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_238_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_242_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_1_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1285_fu_258_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln682_fu_210_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1287_fu_254_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_262_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_4_fu_274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_268_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_286_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component scalef_dmul_64ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component scalef_sitodp_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    scalef_dmul_64ns_bkb_U1 : component scalef_dmul_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_352,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_122_p2);

    scalef_sitodp_32ncud_U2 : component scalef_sitodp_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => as_load_reg_347,
        ce => ap_const_logic_1,
        dout => grp_fu_127_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_88 <= i_reg_324;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_88 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_111 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_0_reg_111 <= j_reg_332;
            end if; 
        end if;
    end process;

    phi_mul_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_99 <= add_ln20_reg_316;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_99 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln20_reg_316 <= add_ln20_fu_130_p2;
                i_reg_324 <= i_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                as_load_reg_347 <= as_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_332 <= j_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                p_Result_s_reg_362 <= p_Val2_s_fu_175_p1(63 downto 63);
                p_Val2_5_reg_367 <= p_Val2_5_fu_296_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_reg_352 <= grp_fu_127_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                x_assign_reg_357 <= grp_fu_122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln24_1_reg_337(13 downto 0) <= zext_ln24_1_fu_170_p1(13 downto 0);
            end if;
        end if;
    end process;
    zext_ln24_1_reg_337(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln22_fu_148_p2, icmp_ln20_fu_136_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_136_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln22_fu_148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln20_fu_130_p2 <= std_logic_vector(unsigned(phi_mul_reg_99) + unsigned(ap_const_lv14_64));
    add_ln24_fu_164_p2 <= std_logic_vector(unsigned(phi_mul_reg_99) + unsigned(zext_ln24_fu_160_p1));
    add_ln502_fu_218_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln502_fu_214_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln20_fu_136_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_136_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln20_fu_136_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_136_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    as_address0 <= zext_ln24_1_fu_170_p1(14 - 1 downto 0);

    as_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            as_ce0 <= ap_const_logic_1;
        else 
            as_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bs_address0 <= zext_ln24_1_reg_337(14 - 1 downto 0);

    bs_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            bs_ce0 <= ap_const_logic_1;
        else 
            bs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bs_d0 <= 
        result_V_1_fu_304_p2 when (p_Result_s_reg_362(0) = '1') else 
        p_Val2_5_reg_367;

    bs_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            bs_we0 <= ap_const_logic_1;
        else 
            bs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_142_p2 <= std_logic_vector(unsigned(i_0_reg_88) + unsigned(ap_const_lv7_1));
    icmp_ln20_fu_136_p2 <= "1" when (i_0_reg_88 = ap_const_lv7_64) else "0";
    icmp_ln22_fu_148_p2 <= "1" when (j_0_reg_111 = ap_const_lv7_64) else "0";
    isNeg_fu_224_p3 <= add_ln502_fu_218_p2(11 downto 11);
    j_fu_154_p2 <= std_logic_vector(unsigned(j_0_reg_111) + unsigned(ap_const_lv7_1));
    mantissa_V_fu_200_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_196_p1) & ap_const_lv1_0);
    p_Val2_5_fu_296_p3 <= 
        zext_ln662_fu_282_p1 when (isNeg_fu_224_p3(0) = '1') else 
        tmp_2_fu_286_p4;
    p_Val2_s_fu_175_p1 <= x_assign_reg_357;
    r_V_1_fu_268_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_210_p1),to_integer(unsigned('0' & zext_ln1287_fu_254_p1(31-1 downto 0)))));
    r_V_fu_262_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_200_p4),to_integer(unsigned('0' & zext_ln1285_fu_258_p1(31-1 downto 0)))));
    result_V_1_fu_304_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_reg_367));
        sext_ln1311_1_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_242_p3),32));

        sext_ln1311_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_232_p2),12));

    sub_ln1311_fu_232_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_186_p4));
    tmp_2_fu_286_p4 <= r_V_1_fu_268_p2(84 downto 53);
    tmp_4_fu_274_p3 <= r_V_fu_262_p2(53 downto 53);
    tmp_V_1_fu_196_p1 <= p_Val2_s_fu_175_p1(52 - 1 downto 0);
    tmp_V_fu_186_p4 <= p_Val2_s_fu_175_p1(62 downto 52);
    ush_fu_242_p3 <= 
        sext_ln1311_fu_238_p1 when (isNeg_fu_224_p3(0) = '1') else 
        add_ln502_fu_218_p2;
    zext_ln1285_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_250_p1),54));
    zext_ln1287_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_250_p1),137));
    zext_ln24_1_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_164_p2),64));
    zext_ln24_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_111),14));
    zext_ln502_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_186_p4),12));
    zext_ln662_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_274_p3),32));
    zext_ln682_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_200_p4),137));
end behav;
