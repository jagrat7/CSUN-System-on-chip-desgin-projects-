// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="scalef,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.789000,HLS_SYN_LAT=160201,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=11,HLS_SYN_FF=1010,HLS_SYN_LUT=2209,HLS_VERSION=2019_1}" *)

module scalef (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        as_address0,
        as_ce0,
        as_q0,
        bs_address0,
        bs_ce0,
        bs_we0,
        bs_d0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] as_address0;
output   as_ce0;
input  [31:0] as_q0;
output  [13:0] bs_address0;
output   bs_ce0;
output   bs_we0;
output  [31:0] bs_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg as_ce0;
reg bs_ce0;
reg bs_we0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] add_ln20_fu_130_p2;
reg   [13:0] add_ln20_reg_316;
wire    ap_CS_fsm_state2;
wire   [6:0] i_fu_142_p2;
reg   [6:0] i_reg_324;
wire   [6:0] j_fu_154_p2;
reg   [6:0] j_reg_332;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln24_1_fu_170_p1;
reg   [63:0] zext_ln24_1_reg_337;
wire   [0:0] icmp_ln22_fu_148_p2;
reg   [31:0] as_load_reg_347;
wire    ap_CS_fsm_state4;
wire   [63:0] grp_fu_127_p1;
reg   [63:0] tmp_reg_352;
wire    ap_CS_fsm_state10;
wire   [63:0] grp_fu_122_p2;
reg   [63:0] x_assign_reg_357;
wire    ap_CS_fsm_state16;
reg   [0:0] p_Result_s_reg_362;
wire    ap_CS_fsm_state17;
wire   [31:0] p_Val2_5_fu_296_p3;
reg   [31:0] p_Val2_5_reg_367;
reg   [6:0] i_0_reg_88;
reg   [13:0] phi_mul_reg_99;
reg   [6:0] j_0_reg_111;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln20_fu_136_p2;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state5;
wire   [13:0] zext_ln24_fu_160_p1;
wire   [13:0] add_ln24_fu_164_p2;
wire   [63:0] p_Val2_s_fu_175_p1;
wire   [51:0] tmp_V_1_fu_196_p1;
wire   [53:0] mantissa_V_fu_200_p4;
wire   [10:0] tmp_V_fu_186_p4;
wire   [11:0] zext_ln502_fu_214_p1;
wire   [11:0] add_ln502_fu_218_p2;
wire   [10:0] sub_ln1311_fu_232_p2;
wire   [0:0] isNeg_fu_224_p3;
wire  signed [11:0] sext_ln1311_fu_238_p1;
wire   [11:0] ush_fu_242_p3;
wire  signed [31:0] sext_ln1311_1_fu_250_p1;
wire   [53:0] zext_ln1285_fu_258_p1;
wire   [136:0] zext_ln682_fu_210_p1;
wire   [136:0] zext_ln1287_fu_254_p1;
wire   [53:0] r_V_fu_262_p2;
wire   [0:0] tmp_4_fu_274_p3;
wire   [136:0] r_V_1_fu_268_p2;
wire   [31:0] zext_ln662_fu_282_p1;
wire   [31:0] tmp_2_fu_286_p4;
wire   [31:0] result_V_1_fu_304_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

scalef_dmul_64ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
scalef_dmul_64ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_352),
    .din1(64'd4602678819172646912),
    .ce(1'b1),
    .dout(grp_fu_122_p2)
);

scalef_sitodp_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
scalef_sitodp_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(as_load_reg_347),
    .ce(1'b1),
    .dout(grp_fu_127_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_88 <= i_reg_324;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_88 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_111 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j_0_reg_111 <= j_reg_332;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_99 <= add_ln20_reg_316;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_99 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln20_reg_316 <= add_ln20_fu_130_p2;
        i_reg_324 <= i_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        as_load_reg_347 <= as_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_332 <= j_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_Result_s_reg_362 <= p_Val2_s_fu_175_p1[32'd63];
        p_Val2_5_reg_367 <= p_Val2_5_fu_296_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_reg_352 <= grp_fu_127_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        x_assign_reg_357 <= grp_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln24_1_reg_337[13 : 0] <= zext_ln24_1_fu_170_p1[13 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_136_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_136_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        as_ce0 = 1'b1;
    end else begin
        as_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bs_ce0 = 1'b1;
    end else begin
        bs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bs_we0 = 1'b1;
    end else begin
        bs_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_136_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln22_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_130_p2 = (phi_mul_reg_99 + 14'd100);

assign add_ln24_fu_164_p2 = (phi_mul_reg_99 + zext_ln24_fu_160_p1);

assign add_ln502_fu_218_p2 = ($signed(12'd3073) + $signed(zext_ln502_fu_214_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign as_address0 = zext_ln24_1_fu_170_p1;

assign bs_address0 = zext_ln24_1_reg_337;

assign bs_d0 = ((p_Result_s_reg_362[0:0] === 1'b1) ? result_V_1_fu_304_p2 : p_Val2_5_reg_367);

assign i_fu_142_p2 = (i_0_reg_88 + 7'd1);

assign icmp_ln20_fu_136_p2 = ((i_0_reg_88 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_148_p2 = ((j_0_reg_111 == 7'd100) ? 1'b1 : 1'b0);

assign isNeg_fu_224_p3 = add_ln502_fu_218_p2[32'd11];

assign j_fu_154_p2 = (j_0_reg_111 + 7'd1);

assign mantissa_V_fu_200_p4 = {{{{1'd1}, {tmp_V_1_fu_196_p1}}}, {1'd0}};

assign p_Val2_5_fu_296_p3 = ((isNeg_fu_224_p3[0:0] === 1'b1) ? zext_ln662_fu_282_p1 : tmp_2_fu_286_p4);

assign p_Val2_s_fu_175_p1 = x_assign_reg_357;

assign r_V_1_fu_268_p2 = zext_ln682_fu_210_p1 << zext_ln1287_fu_254_p1;

assign r_V_fu_262_p2 = mantissa_V_fu_200_p4 >> zext_ln1285_fu_258_p1;

assign result_V_1_fu_304_p2 = (32'd0 - p_Val2_5_reg_367);

assign sext_ln1311_1_fu_250_p1 = $signed(ush_fu_242_p3);

assign sext_ln1311_fu_238_p1 = $signed(sub_ln1311_fu_232_p2);

assign sub_ln1311_fu_232_p2 = (11'd1023 - tmp_V_fu_186_p4);

assign tmp_2_fu_286_p4 = {{r_V_1_fu_268_p2[84:53]}};

assign tmp_4_fu_274_p3 = r_V_fu_262_p2[32'd53];

assign tmp_V_1_fu_196_p1 = p_Val2_s_fu_175_p1[51:0];

assign tmp_V_fu_186_p4 = {{p_Val2_s_fu_175_p1[62:52]}};

assign ush_fu_242_p3 = ((isNeg_fu_224_p3[0:0] === 1'b1) ? sext_ln1311_fu_238_p1 : add_ln502_fu_218_p2);

assign zext_ln1285_fu_258_p1 = $unsigned(sext_ln1311_1_fu_250_p1);

assign zext_ln1287_fu_254_p1 = $unsigned(sext_ln1311_1_fu_250_p1);

assign zext_ln24_1_fu_170_p1 = add_ln24_fu_164_p2;

assign zext_ln24_fu_160_p1 = j_0_reg_111;

assign zext_ln502_fu_214_p1 = tmp_V_fu_186_p4;

assign zext_ln662_fu_282_p1 = tmp_4_fu_274_p3;

assign zext_ln682_fu_210_p1 = mantissa_V_fu_200_p4;

always @ (posedge ap_clk) begin
    zext_ln24_1_reg_337[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //scalef
