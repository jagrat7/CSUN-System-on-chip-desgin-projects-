// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _decompressf_HH_
#define _decompressf_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "decompressf_unr1d.h"

namespace ap_rtl {

struct decompressf : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > c_address0;
    sc_out< sc_logic > c_ce0;
    sc_in< sc_lv<32> > c_q0;
    sc_out< sc_lv<10> > c_address1;
    sc_out< sc_logic > c_ce1;
    sc_in< sc_lv<32> > c_q1;
    sc_out< sc_lv<10> > dc_address0;
    sc_out< sc_logic > dc_ce0;
    sc_out< sc_logic > dc_we0;
    sc_out< sc_lv<32> > dc_d0;


    // Module declarations
    decompressf(sc_module_name name);
    SC_HAS_PROCESS(decompressf);

    ~decompressf();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    decompressf_unr1d* unr1d_U;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln283_fu_221_p2;
    sc_signal< sc_lv<32> > c_load_reg_406;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > c_load_1_reg_411;
    sc_signal< sc_lv<32> > j_3_fu_265_p2;
    sc_signal< sc_lv<32> > j_3_reg_416;
    sc_signal< sc_lv<31> > k_fu_280_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > add_ln291_fu_291_p2;
    sc_signal< sc_lv<1> > icmp_ln286_fu_275_p2;
    sc_signal< sc_lv<32> > h_fu_297_p2;
    sc_signal< sc_lv<10> > add_ln303_2_fu_303_p2;
    sc_signal< sc_lv<10> > add_ln303_2_reg_439;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<10> > add_ln303_3_fu_309_p2;
    sc_signal< sc_lv<10> > add_ln303_3_reg_444;
    sc_signal< sc_lv<5> > i_fu_321_p2;
    sc_signal< sc_lv<5> > i_reg_452;
    sc_signal< sc_lv<1> > icmp_ln303_fu_327_p2;
    sc_signal< sc_lv<1> > icmp_ln303_reg_457;
    sc_signal< sc_lv<1> > icmp_ln298_fu_315_p2;
    sc_signal< sc_lv<5> > j_fu_343_p2;
    sc_signal< sc_lv<5> > j_reg_465;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > icmp_ln300_fu_337_p2;
    sc_signal< sc_lv<10> > add_ln303_1_fu_377_p2;
    sc_signal< sc_lv<10> > add_ln303_1_reg_475;
    sc_signal< sc_lv<32> > x_fu_383_p2;
    sc_signal< sc_lv<10> > unr1d_address0;
    sc_signal< sc_logic > unr1d_ce0;
    sc_signal< sc_logic > unr1d_we0;
    sc_signal< sc_lv<32> > unr1d_q0;
    sc_signal< sc_lv<32> > j_0_reg_118;
    sc_signal< sc_lv<32> > h_0_reg_130;
    sc_signal< sc_lv<32> > j_1_reg_142;
    sc_signal< sc_lv<31> > k_0_reg_152;
    sc_signal< sc_lv<32> > x_0_reg_163;
    sc_signal< sc_lv<5> > i_0_reg_175;
    sc_signal< sc_lv<10> > phi_mul_reg_186;
    sc_signal< sc_lv<10> > phi_mul1_reg_198;
    sc_signal< sc_lv<5> > j_2_reg_210;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > sext_ln286_fu_233_p1;
    sc_signal< sc_lv<64> > sext_ln289_fu_238_p1;
    sc_signal< sc_lv<64> > sext_ln289_1_fu_286_p1;
    sc_signal< sc_lv<64> > zext_ln303_fu_355_p1;
    sc_signal< sc_lv<64> > zext_ln303_2_fu_389_p1;
    sc_signal< sc_lv<32> > or_ln286_fu_227_p2;
    sc_signal< sc_lv<1> > empty_fu_247_p2;
    sc_signal< sc_lv<31> > trunc_ln289_fu_243_p1;
    sc_signal< sc_lv<31> > smax_fu_253_p3;
    sc_signal< sc_lv<32> > smax_cast_fu_261_p1;
    sc_signal< sc_lv<32> > zext_ln286_fu_271_p1;
    sc_signal< sc_lv<10> > zext_ln300_fu_333_p1;
    sc_signal< sc_lv<10> > add_ln303_fu_349_p2;
    sc_signal< sc_lv<5> > sub_ln303_fu_360_p2;
    sc_signal< sc_lv<5> > select_ln303_fu_366_p3;
    sc_signal< sc_lv<10> > zext_ln303_1_fu_373_p1;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_271;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<10> ap_const_lv10_19;
    static const sc_lv<5> ap_const_lv5_19;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_18;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln291_fu_291_p2();
    void thread_add_ln303_1_fu_377_p2();
    void thread_add_ln303_2_fu_303_p2();
    void thread_add_ln303_3_fu_309_p2();
    void thread_add_ln303_fu_349_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_address0();
    void thread_c_address1();
    void thread_c_ce0();
    void thread_c_ce1();
    void thread_dc_address0();
    void thread_dc_ce0();
    void thread_dc_d0();
    void thread_dc_we0();
    void thread_empty_fu_247_p2();
    void thread_h_fu_297_p2();
    void thread_i_fu_321_p2();
    void thread_icmp_ln283_fu_221_p2();
    void thread_icmp_ln286_fu_275_p2();
    void thread_icmp_ln298_fu_315_p2();
    void thread_icmp_ln300_fu_337_p2();
    void thread_icmp_ln303_fu_327_p2();
    void thread_j_3_fu_265_p2();
    void thread_j_fu_343_p2();
    void thread_k_fu_280_p2();
    void thread_or_ln286_fu_227_p2();
    void thread_select_ln303_fu_366_p3();
    void thread_sext_ln286_fu_233_p1();
    void thread_sext_ln289_1_fu_286_p1();
    void thread_sext_ln289_fu_238_p1();
    void thread_smax_cast_fu_261_p1();
    void thread_smax_fu_253_p3();
    void thread_sub_ln303_fu_360_p2();
    void thread_trunc_ln289_fu_243_p1();
    void thread_unr1d_address0();
    void thread_unr1d_ce0();
    void thread_unr1d_we0();
    void thread_x_fu_383_p2();
    void thread_zext_ln286_fu_271_p1();
    void thread_zext_ln300_fu_333_p1();
    void thread_zext_ln303_1_fu_373_p1();
    void thread_zext_ln303_2_fu_389_p1();
    void thread_zext_ln303_fu_355_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
