// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _invertf_HH_
#define _invertf_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "invertf_mac_muladbkb.h"

namespace ap_rtl {

struct invertf : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > ai_address0;
    sc_out< sc_logic > ai_ce0;
    sc_in< sc_lv<32> > ai_q0;
    sc_out< sc_lv<14> > bi_address0;
    sc_out< sc_logic > bi_ce0;
    sc_out< sc_logic > bi_we0;
    sc_out< sc_lv<32> > bi_d0;


    // Module declarations
    invertf(sc_module_name name);
    SC_HAS_PROCESS(invertf);

    ~invertf();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    invertf_mac_muladbkb<1,1,7,8,7,14>* invertf_mac_muladbkb_U1;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<14> > indvar_flatten_reg_78;
    sc_signal< sc_lv<7> > i_0_reg_89;
    sc_signal< sc_lv<7> > j_0_reg_100;
    sc_signal< sc_lv<1> > icmp_ln324_fu_111_p2;
    sc_signal< sc_lv<1> > icmp_ln324_reg_181;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln324_reg_181_pp0_iter1_reg;
    sc_signal< sc_lv<14> > add_ln324_fu_117_p2;
    sc_signal< sc_lv<14> > add_ln324_reg_185;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<7> > select_ln328_fu_135_p3;
    sc_signal< sc_lv<7> > select_ln328_reg_190;
    sc_signal< sc_lv<7> > select_ln328_1_fu_143_p3;
    sc_signal< sc_lv<7> > select_ln328_1_reg_196;
    sc_signal< sc_lv<64> > zext_ln328_2_fu_157_p1;
    sc_signal< sc_lv<64> > zext_ln328_2_reg_202;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<7> > j_fu_161_p2;
    sc_signal< sc_lv<7> > j_reg_212;
    sc_signal< sc_lv<32> > ai_load_reg_217;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<14> > ap_phi_mux_indvar_flatten_phi_fu_82_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<7> > ap_phi_mux_i_0_phi_fu_93_p4;
    sc_signal< sc_lv<7> > ap_phi_mux_j_0_phi_fu_104_p4;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<1> > icmp_ln326_fu_129_p2;
    sc_signal< sc_lv<7> > i_fu_123_p2;
    sc_signal< sc_lv<14> > grp_fu_172_p3;
    sc_signal< sc_lv<7> > grp_fu_172_p0;
    sc_signal< sc_lv<8> > grp_fu_172_p1;
    sc_signal< sc_lv<7> > grp_fu_172_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<14> > grp_fu_172_p00;
    sc_signal< sc_lv<14> > grp_fu_172_p20;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<14> ap_const_lv14_2710;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<32> ap_const_lv32_FF;
    static const sc_lv<14> ap_const_lv14_64;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln324_fu_117_p2();
    void thread_ai_address0();
    void thread_ai_ce0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_93_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_82_p4();
    void thread_ap_phi_mux_j_0_phi_fu_104_p4();
    void thread_ap_ready();
    void thread_bi_address0();
    void thread_bi_ce0();
    void thread_bi_d0();
    void thread_bi_we0();
    void thread_grp_fu_172_p0();
    void thread_grp_fu_172_p00();
    void thread_grp_fu_172_p1();
    void thread_grp_fu_172_p2();
    void thread_grp_fu_172_p20();
    void thread_i_fu_123_p2();
    void thread_icmp_ln324_fu_111_p2();
    void thread_icmp_ln326_fu_129_p2();
    void thread_j_fu_161_p2();
    void thread_select_ln328_1_fu_143_p3();
    void thread_select_ln328_fu_135_p3();
    void thread_zext_ln328_2_fu_157_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
