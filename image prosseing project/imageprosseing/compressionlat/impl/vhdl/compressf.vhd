-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compressf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    as_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    as_ce0 : OUT STD_LOGIC;
    as_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    bs_ce0 : OUT STD_LOGIC;
    bs_we0 : OUT STD_LOGIC;
    bs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    bs_ce1 : OUT STD_LOGIC;
    bs_we1 : OUT STD_LOGIC;
    bs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of compressf is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "compressf,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.239750,HLS_SYN_LAT=4427,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=353,HLS_SYN_LUT=639,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_19 : STD_LOGIC_VECTOR (9 downto 0) := "0000011001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_271 : STD_LOGIC_VECTOR (9 downto 0) := "1001110001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln220_2_fu_255_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln220_2_reg_485 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln220_3_fu_261_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln220_3_reg_490 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_fu_273_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_498 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_fu_279_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_503 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln211_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln220_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_311_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_531 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln214_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln220_1_fu_345_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln220_1_reg_541 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln220_fu_351_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln220_reg_546 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln219_fu_368_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln219_reg_556 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln228_fu_382_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln228_reg_566 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_fu_392_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_574 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln228_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal odoarr_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal odoarr_load_1_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln232_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln232_reg_595 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_1_load_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln243_fu_443_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln243_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal odoarr_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal odoarr_ce0 : STD_LOGIC;
    signal odoarr_we0 : STD_LOGIC;
    signal odoarr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal odoarr_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal odoarr_ce1 : STD_LOGIC;
    signal k_0_reg_163 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_198 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul1_reg_210 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_1_reg_222 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_0_reg_233 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_244 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln218_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_1_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_2_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_1_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_1_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln237_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln240_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln241_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_1_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_1_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln214_fu_301_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln218_fu_317_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln220_fu_328_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln220_fu_334_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln220_fu_341_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln237_fu_417_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln237_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln240_fu_458_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln241_fu_463_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln241_fu_463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_fu_474_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component compressf_odoarr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    odoarr_U : component compressf_odoarr
    generic map (
        DataWidth => 32,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => odoarr_address0,
        ce0 => odoarr_ce0,
        we0 => odoarr_we0,
        d0 => as_q0,
        q0 => odoarr_q0,
        address1 => odoarr_address1,
        ce1 => odoarr_ce1,
        q1 => odoarr_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    count_1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                count_1_fu_64 <= select_ln243_fu_443_p3;
            elsif (((icmp_ln232_fu_408_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                count_1_fu_64 <= count_fu_427_p2;
            elsif (((icmp_ln211_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                count_1_fu_64 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    cp_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                cp_1_fu_68 <= cp_fu_474_p2;
            elsif (((icmp_ln211_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                cp_1_fu_68 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln214_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_175 <= i_2_reg_498;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_175 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_1_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_1_reg_244 <= i_reg_574;
            elsif (((icmp_ln211_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_244 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_0_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_233 <= j_reg_531;
            elsif (((icmp_ln211_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_233 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln214_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_163 <= k_reg_503;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_reg_163 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k_1_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_1_reg_222 <= add_ln219_reg_556;
            elsif (((icmp_ln211_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_1_reg_222 <= k_0_reg_163;
            end if; 
        end if;
    end process;

    phi_mul1_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln214_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul1_reg_210 <= add_ln220_2_reg_485;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_210 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln214_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_198 <= add_ln220_3_reg_490;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_198 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    x_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln214_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_0_reg_186 <= x_fu_357_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_0_reg_186 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln219_reg_556 <= add_ln219_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln214_fu_305_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln220_1_reg_541 <= add_ln220_1_fu_345_p2;
                add_ln220_reg_546 <= add_ln220_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln220_2_reg_485 <= add_ln220_2_fu_255_p2;
                add_ln220_3_reg_490 <= add_ln220_3_fu_261_p2;
                i_2_reg_498 <= i_2_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                count_1_load_reg_599 <= count_1_fu_64;
                icmp_ln232_reg_595 <= icmp_ln232_fu_408_p2;
                odoarr_load_1_reg_589 <= odoarr_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_reg_574 <= i_fu_392_p2;
                    zext_ln228_reg_566(9 downto 0) <= zext_ln228_fu_382_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln211_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln220_reg_508 <= icmp_ln220_fu_285_p2;
                k_reg_503 <= k_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_531 <= j_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                select_ln243_reg_609 <= select_ln243_fu_443_p3;
            end if;
        end if;
    end process;
    zext_ln228_reg_566(10) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln211_fu_267_p2, ap_CS_fsm_state3, icmp_ln214_fu_305_p2, ap_CS_fsm_state6, icmp_ln228_fu_386_p2, ap_CS_fsm_state7, icmp_ln232_fu_408_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln211_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln214_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln228_fu_386_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln232_fu_408_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln218_fu_317_p2 <= std_logic_vector(unsigned(phi_mul_reg_198) + unsigned(zext_ln214_fu_301_p1));
    add_ln219_fu_368_p2 <= std_logic_vector(unsigned(k_1_reg_222) + unsigned(ap_const_lv10_1));
    add_ln220_1_fu_345_p2 <= std_logic_vector(unsigned(phi_mul_reg_198) + unsigned(zext_ln220_fu_341_p1));
    add_ln220_2_fu_255_p2 <= std_logic_vector(unsigned(phi_mul1_reg_210) + unsigned(ap_const_lv10_19));
    add_ln220_3_fu_261_p2 <= std_logic_vector(unsigned(phi_mul_reg_198) + unsigned(ap_const_lv10_19));
    add_ln220_fu_351_p2 <= std_logic_vector(unsigned(zext_ln214_fu_301_p1) + unsigned(phi_mul1_reg_210));
    add_ln237_fu_417_p2 <= std_logic_vector(unsigned(zext_ln228_reg_566) + unsigned(ap_const_lv11_7FF));
    add_ln241_fu_463_p0 <= cp_1_fu_68;
    add_ln241_fu_463_p2 <= std_logic_vector(signed(add_ln241_fu_463_p0) + signed(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state6, icmp_ln228_fu_386_p2)
    begin
        if (((icmp_ln228_fu_386_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln228_fu_386_p2)
    begin
        if (((icmp_ln228_fu_386_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    as_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln218_fu_323_p1, zext_ln220_2_fu_374_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            as_address0 <= zext_ln220_2_fu_374_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            as_address0 <= zext_ln218_fu_323_p1(10 - 1 downto 0);
        else 
            as_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    as_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            as_ce0 <= ap_const_logic_1;
        else 
            as_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bs_address0 <= sext_ln240_fu_458_p1(10 - 1 downto 0);
    bs_address1 <= sext_ln241_fu_469_p1(10 - 1 downto 0);

    bs_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bs_ce0 <= ap_const_logic_1;
        else 
            bs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bs_ce1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bs_ce1 <= ap_const_logic_1;
        else 
            bs_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bs_d0 <= odoarr_load_1_reg_589;
    bs_d1 <= select_ln243_reg_609;

    bs_we0_assign_proc : process(icmp_ln232_reg_595, ap_CS_fsm_state9)
    begin
        if (((icmp_ln232_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            bs_we0 <= ap_const_logic_1;
        else 
            bs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bs_we1_assign_proc : process(icmp_ln232_reg_595, ap_CS_fsm_state9)
    begin
        if (((icmp_ln232_reg_595 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            bs_we1 <= ap_const_logic_1;
        else 
            bs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    count_fu_427_p2 <= std_logic_vector(unsigned(count_1_fu_64) + unsigned(ap_const_lv32_1));
    cp_fu_474_p0 <= cp_1_fu_68;
    cp_fu_474_p2 <= std_logic_vector(signed(cp_fu_474_p0) + signed(ap_const_lv32_2));
    i_2_fu_273_p2 <= std_logic_vector(unsigned(i_0_reg_175) + unsigned(ap_const_lv5_1));
    i_fu_392_p2 <= std_logic_vector(unsigned(i_1_reg_244) + unsigned(ap_const_lv10_1));
    icmp_ln211_fu_267_p2 <= "1" when (i_0_reg_175 = ap_const_lv5_19) else "0";
    icmp_ln214_fu_305_p2 <= "1" when (j_0_reg_233 = ap_const_lv5_19) else "0";
    icmp_ln220_fu_285_p2 <= "1" when (x_0_reg_186 = ap_const_lv32_0) else "0";
    icmp_ln228_fu_386_p2 <= "1" when (i_1_reg_244 = ap_const_lv10_271) else "0";
    icmp_ln232_fu_408_p2 <= "1" when (odoarr_q0 = odoarr_q1) else "0";
    icmp_ln237_fu_438_p2 <= "1" when (odoarr_q1 = odoarr_load_1_reg_589) else "0";
    j_fu_311_p2 <= std_logic_vector(unsigned(j_0_reg_233) + unsigned(ap_const_lv5_1));
    k_fu_279_p2 <= std_logic_vector(unsigned(k_0_reg_163) + unsigned(ap_const_lv10_19));

    odoarr_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, zext_ln218_1_fu_363_p1, zext_ln220_1_fu_378_p1, zext_ln232_fu_398_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            odoarr_address0 <= zext_ln232_fu_398_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            odoarr_address0 <= zext_ln220_1_fu_378_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            odoarr_address0 <= zext_ln218_1_fu_363_p1(10 - 1 downto 0);
        else 
            odoarr_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    odoarr_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln232_1_fu_403_p1, sext_ln237_fu_422_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            odoarr_address1 <= sext_ln237_fu_422_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            odoarr_address1 <= zext_ln232_1_fu_403_p1(10 - 1 downto 0);
        else 
            odoarr_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    odoarr_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            odoarr_ce0 <= ap_const_logic_1;
        else 
            odoarr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    odoarr_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            odoarr_ce1 <= ap_const_logic_1;
        else 
            odoarr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    odoarr_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            odoarr_we0 <= ap_const_logic_1;
        else 
            odoarr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln220_fu_334_p3 <= 
        j_0_reg_233 when (icmp_ln220_reg_508(0) = '1') else 
        sub_ln220_fu_328_p2;
    select_ln243_fu_443_p3 <= 
        count_1_load_reg_599 when (icmp_ln237_fu_438_p2(0) = '1') else 
        ap_const_lv32_1;
        sext_ln237_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln237_fu_417_p2),64));

    sext_ln240_fu_458_p0 <= cp_1_fu_68;
        sext_ln240_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln240_fu_458_p0),64));

        sext_ln241_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln241_fu_463_p2),64));

    sub_ln220_fu_328_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(j_0_reg_233));
    x_fu_357_p2 <= (x_0_reg_186 xor ap_const_lv32_1);
    zext_ln214_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_233),10));
    zext_ln218_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_222),64));
    zext_ln218_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln218_fu_317_p2),64));
    zext_ln220_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln220_reg_546),64));
    zext_ln220_2_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln220_1_reg_541),64));
    zext_ln220_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln220_fu_334_p3),10));
    zext_ln228_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_244),11));
    zext_ln232_1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_244),64));
    zext_ln232_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_392_p2),64));
end behav;
