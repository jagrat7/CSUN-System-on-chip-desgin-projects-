// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _binaryf_HH_
#define _binaryf_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct binaryf : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<32> > a_q0;
    sc_out< sc_lv<14> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_out< sc_logic > b_we0;
    sc_out< sc_lv<32> > b_d0;


    // Module declarations
    binaryf(sc_module_name name);
    SC_HAS_PROCESS(binaryf);

    ~binaryf();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<14> > add_ln43_fu_98_p2;
    sc_signal< sc_lv<14> > add_ln43_reg_153;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > i_fu_110_p2;
    sc_signal< sc_lv<7> > i_reg_161;
    sc_signal< sc_lv<7> > j_fu_122_p2;
    sc_signal< sc_lv<7> > j_reg_169;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > zext_ln47_1_fu_138_p1;
    sc_signal< sc_lv<64> > zext_ln47_1_reg_174;
    sc_signal< sc_lv<1> > icmp_ln45_fu_116_p2;
    sc_signal< sc_lv<1> > icmp_ln47_fu_143_p2;
    sc_signal< sc_lv<1> > icmp_ln47_reg_184;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<7> > i_0_reg_64;
    sc_signal< sc_lv<14> > phi_mul_reg_75;
    sc_signal< sc_lv<7> > j_0_reg_87;
    sc_signal< sc_lv<1> > icmp_ln43_fu_104_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<14> > zext_ln47_fu_128_p1;
    sc_signal< sc_lv<14> > add_ln47_fu_132_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<14> ap_const_lv14_64;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_96;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_add_ln43_fu_98_p2();
    void thread_add_ln47_fu_132_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_b_d0();
    void thread_b_we0();
    void thread_i_fu_110_p2();
    void thread_icmp_ln43_fu_104_p2();
    void thread_icmp_ln45_fu_116_p2();
    void thread_icmp_ln47_fu_143_p2();
    void thread_j_fu_122_p2();
    void thread_zext_ln47_1_fu_138_p1();
    void thread_zext_ln47_fu_128_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
