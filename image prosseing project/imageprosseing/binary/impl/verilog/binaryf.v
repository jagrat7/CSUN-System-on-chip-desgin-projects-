// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="binaryf,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.727000,HLS_SYN_LAT=30201,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=76,HLS_SYN_LUT=168,HLS_VERSION=2019_1}" *)

module binaryf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_we0,
        b_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [13:0] b_address0;
output   b_ce0;
output   b_we0;
output  [31:0] b_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg b_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] add_ln43_fu_98_p2;
reg   [13:0] add_ln43_reg_153;
wire    ap_CS_fsm_state2;
wire   [6:0] i_fu_110_p2;
reg   [6:0] i_reg_161;
wire   [6:0] j_fu_122_p2;
reg   [6:0] j_reg_169;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln47_1_fu_138_p1;
reg   [63:0] zext_ln47_1_reg_174;
wire   [0:0] icmp_ln45_fu_116_p2;
wire   [0:0] icmp_ln47_fu_143_p2;
reg   [0:0] icmp_ln47_reg_184;
wire    ap_CS_fsm_state4;
reg   [6:0] i_0_reg_64;
reg   [13:0] phi_mul_reg_75;
reg   [6:0] j_0_reg_87;
wire   [0:0] icmp_ln43_fu_104_p2;
wire    ap_CS_fsm_state5;
wire   [13:0] zext_ln47_fu_128_p1;
wire   [13:0] add_ln47_fu_132_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_64 <= i_reg_161;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_64 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_87 <= j_reg_169;
    end else if (((icmp_ln43_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_87 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_75 <= add_ln43_reg_153;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_75 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln43_reg_153 <= add_ln43_fu_98_p2;
        i_reg_161 <= i_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln47_reg_184 <= icmp_ln47_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_169 <= j_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln47_1_reg_174[13 : 0] <= zext_ln47_1_fu_138_p1[13 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln43_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln45_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln47_1_fu_138_p1;

assign add_ln43_fu_98_p2 = (phi_mul_reg_75 + 14'd100);

assign add_ln47_fu_132_p2 = (phi_mul_reg_75 + zext_ln47_fu_128_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign b_address0 = zext_ln47_1_reg_174;

assign b_d0 = icmp_ln47_reg_184;

assign i_fu_110_p2 = (i_0_reg_64 + 7'd1);

assign icmp_ln43_fu_104_p2 = ((i_0_reg_64 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_116_p2 = ((j_0_reg_87 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_143_p2 = (($signed(a_q0) > $signed(32'd150)) ? 1'b1 : 1'b0);

assign j_fu_122_p2 = (j_0_reg_87 + 7'd1);

assign zext_ln47_1_fu_138_p1 = add_ln47_fu_132_p2;

assign zext_ln47_fu_128_p1 = j_0_reg_87;

always @ (posedge ap_clk) begin
    zext_ln47_1_reg_174[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //binaryf
